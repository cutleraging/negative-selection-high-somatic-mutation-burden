t_test(SNV_est ~ condition + cycle) %>%
adjust_pvalue(method = "fdr") %>%
add_significance("p.adj")
# stats
SNV.test <- sample_table %>%
t_test(condition + cycle ~ SNV_est) %>%
adjust_pvalue(method = "fdr") %>%
add_significance("p.adj")
# stats
lm_result <- lm(SNV_est ~ condition + cycle, data = sample_table)
summary(lm_result)
SNV.test <- tidy(lm_result)
SNV.test
SNV.test <- tidy(lm_result) %>%
mutate(p.adj = p.adjust(p.value, method = "fdr")) %>%
add_significance("p.adj")
SNV.test
anova_result <- aov(SNV_est ~ condition + cycle, data = sample_table)
summary(anova_result)
# Post-hoc test if ANOVA is significant
if (summary(anova_result)[[1]]$'Pr(>F)'[1] < 0.05) {
post_hoc_result <- sample_table %>%
group_by(condition, cycle) %>%
TukeyHSD(anova_result)
print(post_hoc_result)
}
summary(anova_result)
SNV.test <- sample_table %>%
t_test(SNV_est ~ condition) %>%
adjust_pvalue(method = "fdr") %>%
add_significance("p.adj")
SNV.test
# Post-hoc test if ANOVA is significant
if (summary(anova_result)[[1]]$'Pr(>F)'[1] < 0.05) {
post_hoc_result <- sample_table %>%
group_by(condition, cycle) %>%
TukeyHSD(anova_result)
print(post_hoc_result)
}
sample_table %>%
group_by(condition, cycle) %>%
TukeyHSD(anova_result)
# ANOVA
anova_result <- aov(SNV_est ~ condition + cycle, data = sample_table)
summary(anova_result)
post_hoc_result <- sample_table %>%
group_by(condition, cycle) %>%
TukeyHSD(anova_result)
anova_result <- aov(SNV_est ~ condition + cycle, data = sample_table)
summary(anova_result)
# Post-hoc test if ANOVA is significant
post_hoc_result <- NULL
if (summary(anova_result)[[1]]$'Pr(>F)'[1] < 0.05) {
post_hoc_result <- TukeyHSD(anova_result)
}
TukeyHSD(anova_result)
sample_table
# ANOVA
anova_result <- aov(SNV_est ~ condition + cycle, data = sample_table)
summary(anova_result)
# Post-hoc test if ANOVA is significant
post_hoc_result <- NULL
if (summary(anova_result)[[1]]$'Pr(>F)'[1] < 0.05) {
post_hoc_result <- TukeyHSD(anova_result)
}
anova_result <- aov(SNV_est ~ condition + factor(cycle), data = sample_table)
summary(anova_result)
# Post-hoc test if ANOVA is significant
post_hoc_result <- NULL
if (summary(anova_result)[[1]]$'Pr(>F)'[1] < 0.05) {
post_hoc_result <- TukeyHSD(anova_result)
}
post_hoc_result
post_hoc_df <- broom::tidy(post_hoc_result)
# Filter or adjust post_hoc_df as needed for plotting
# For example, you might want to filter only significant comparisons
significant_comparisons <- post_hoc_df %>%
filter(p.adj < 0.05)
post_hoc_df
annotate("text", x = mean(as.numeric(unlist(strsplit(as.character(comparison$term), "-")))),
y = max(sample_table$SNV_est) * 1.05,  # adjust y position as needed
label = paste("p =", formatC(comparison$p.value, format = "e", digits = 2)),
size = 3)
main_plot <- ggplot(sample_table, aes(x = condition, y = SNV_est, fill = factor(cycle))) +
geom_boxplot(outlier.shape = NA) +
geom_point(position = position_jitterdodge(jitter.width = 0.2), size = 2, alpha = 0.5) +
guides(fill = guide_legend(override.aes = list(shape = NA))) +
labs(x = "Condition", y = "Observed SNVs Per Cell", fill = "Cycle") +
scale_fill_viridis(discrete = TRUE, end = 0.8) +
theme_Publication() +
scale_y_continuous(breaks = seq(0, 60000, by = 10000),
labels = function(x) format(x, scientific = TRUE)) +
theme(legend.justification = c("center","top"),
legend.position = "top") +
scale_x_discrete(labels = c("Control", "ENU"))
for (row in 1:nrow(significant_comparisons)) {
comparison <- significant_comparisons[row, ]
main_plot <- main_plot +
annotate("text", x = mean(as.numeric(unlist(strsplit(as.character(comparison$term), "-")))),
y = max(sample_table$SNV_est) * 1.05,  # adjust y position as needed
label = paste("p =", formatC(comparison$p.value, format = "e", digits = 2)),
size = 3)
}
significant_comparisons <- post_hoc_df %>%
filter(p.adj < 0.05)
post_hoc_df
significant_comparisons <- post_hoc_df %>%
filter(adj.p.value < 0.05)
f
for (row in 1:nrow(significant_comparisons)) {
comparison <- significant_comparisons[row, ]
main_plot <- main_plot +
annotate("text", x = mean(as.numeric(unlist(strsplit(as.character(comparison$term), "-")))),
y = max(sample_table$SNV_est) * 1.05,  # adjust y position as needed
label = paste("p =", formatC(comparison$p.value, format = "e", digits = 2)),
size = 3)
}
pdf("SNV_estimated_mutations_box.pdf",
width = 4,
height = 5)
for (row in 1:nrow(significant_comparisons)) {
comparison <- significant_comparisons[row, ]
main_plot <- main_plot +
annotate("text", x = mean(as.numeric(unlist(strsplit(as.character(comparison$term), "-")))),
y = max(sample_table$SNV_est) * 1.05,  # adjust y position as needed
label = paste("p =", formatC(comparison$p.value, format = "e", digits = 2)),
size = 3)
}
dev.off()
setwd("/Users/ronaldcutler/Dropbox (EinsteinMed)/Vijg-lab/Projects/mutation accumulation/231009 multiple ENU analysis/4-mutation-burden")
# calculate estimated mutations
hg19_size <- 3036303846
sample_table$SNV_est <- sample_table$SNV_obs / sample_table$Cov / sample_table$Sen_SNV * hg19_size
# ANOVA
anova_result <- aov(SNV_est ~ condition + factor(cycle), data = sample_table)
summary(anova_result)
# Post-hoc test if ANOVA is significant
post_hoc_result <- NULL
if (summary(anova_result)[[1]]$'Pr(>F)'[1] < 0.05) {
post_hoc_result <- tidy(TukeyHSD(anova_result))
}
post_hoc_result
write.csv(post_hoc_result, "SNV_estimated_mutation_stats.csv")
anova_result <- aov(SNV_est ~ condition * factor(cycle), data = sample_table)
summary(anova_result)
# Post-hoc test if ANOVA is significant
post_hoc_result <- NULL
if (summary(anova_result)[[1]]$'Pr(>F)'[1] < 0.05) {
post_hoc_result <- tidy(TukeyHSD(anova_result))
}
post_hoc_result
anova_result <- aov(SNV_est ~ condition_cycle, data = sample_table)
summary(anova_result)
# Post-hoc test if ANOVA is significant
post_hoc_result <- NULL
if (summary(anova_result)[[1]]$'Pr(>F)'[1] < 0.05) {
post_hoc_result <- tidy(TukeyHSD(anova_result))
}
post_hoc_result
# ANOVA
anova_result <- aov(SNV_est ~ condition * factor(cycle), data = sample_table)
summary(anova_result)
summary(anova_result)[[2]]
summary(anova_result)
if (anova_table[["Pr(>F)"]][["condition:factor(cycle)"]] < 0.05) {
post_hoc_result <- TukeyHSD(anova_result, which = "condition:factor(cycle)")
post_hoc_table <- broom::tidy(post_hoc_result)
print(post_hoc_table)
}
anova_table <- summary(anova_result)
anova_table
# Check if the interaction term is significant
if (anova_table[["Pr(>F)"]][["condition:factor(cycle)"]] < 0.05) {
post_hoc_result <- TukeyHSD(anova_result, which = "condition:factor(cycle)")
post_hoc_table <- broom::tidy(post_hoc_result)
print(post_hoc_table)
}
anova_table[["Pr(>F)"]][["condition:factor(cycle)"]]
TukeyHSD(anova_result, which = "condition:factor(cycle)")
# ANOVA
anova_result <- aov(SNV_est ~ condition:factor(cycle), data = sample_table)
anova_table <- summary(anova_result)
anova_table
if (anova_table[["Pr(>F)"]][["condition:factor(cycle)"]] < 0.05) {
post_hoc_result <- TukeyHSD(anova_result, which = "condition:factor(cycle)")
post_hoc_table <- broom::tidy(post_hoc_result)
print(post_hoc_table)
}
library(emmeans)
install.packages("emmeans")
library(emmeans)
# ANOVA
lm_result <- lm(SNV_est ~ condition * cycle, data = sample_table)
emm_interaction <- emmeans(lm_result, ~ condition * cycle)
pairwise_results <- pairs(emm_interaction)
adjusted_results <- summary(pairwise_results, adjust = "tukey")
adjusted_results
# ANOVA
lm_result <- lm(SNV_est ~ condition * factor(cycle), data = sample_table)
emm_interaction <- emmeans(lm_result, ~ condition * cycle)
pairwise_results <- pairs(emm_interaction)
adjusted_results <- summary(pairwise_results, adjust = "tukey")
adjusted_results
adjusted_results <- as.tibble(summary(pairwise_results, adjust = "tukey"))
adjusted_results <- as.data.frame((summary(pairwise_results, adjust = "tukey"))
adjusted_results <- as.data.frame((summary(pairwise_results, adjust = "tukey")))
adjusted_results <- as.data.frame((summary(pairwise_results, adjust = "tukey")))
adjusted_results
pairwise_results
adjusted_results <- na.omit(summary(pairwise_results, adjust = "tukey"))
adjusted_results
adjusted_results <- na.omit(summary(pairwise_results, adjust = "tukey")) %>% add_significance("p.adj")
adjusted_results <- na.omit(summary(pairwise_results, adjust = "tukey")) %>% add_significance("p.value")
adjusted_results
lm_result <- lm(SNV_est ~ condition * factor(cycle), data = sample_table)
emm_interaction <- emmeans(lm_result, ~ condition * factor(cycle))
pairwise_results <- pairs(emm_interaction)
adjusted_results <- na.omit(summary(pairwise_results, adjust = "tukey")) %>% add_significance("p.value")
adjusted_results
lm_result <- lm(SNV_est ~ condition * cycle, data = sample_table)
emm_interaction <- emmeans(lm_result, ~ condition * cycle)
pairwise_results <- pairs(emm_interaction)
adjusted_results <- na.omit(summary(pairwise_results, adjust = "tukey")) %>% add_significance("p.value")
adjusted_results
lm_result <- lm(SNV_est ~ condition * factor(cycle), data = sample_table)
emm_interaction <- emmeans(lm_result, ~ condition * factor(cycle))
pairwise_results <- pairs(emm_interaction)
adjusted_results <- na.omit(summary(pairwise_results, adjust = "tukey")) %>% add_significance("p.value")
write.csv(adjusted_results, "SNV_estimated_mutation_stats.csv")
adjusted_results
stats_summary <- sample_table %>%
group_by(condition, cycle) %>%
summarise(mean = mean(SNV_est, na.rm = TRUE),
sd = sd(SNV_est, na.rm = TRUE))
pdf("SNV_estimated_mutations_bar.pdf",
width = 4,
height = 5)
ggplot(sample_table, aes(x = condition, y = SNV_est, fill = factor(cycle))) +
geom_bar(stat = "summary", fun.y = "mean", position = "dodge") +  # Average bar plot
geom_errorbar(data = stats_summary, aes(x = condition, fill = factor(cycle), y = mean, ymin = mean - sd, ymax = mean + sd),
width = 0.5, position = position_dodge(0.9)) +
geom_point(position = position_jitterdodge(jitter.width = 0.2), size = 2, alpha = 0.5) +
guides(fill = guide_legend(override.aes = list(shape = NA))) +
labs(x = "Condition", y = "Estimated SNVs Per Cell", fill = "Cycle") +
scale_fill_viridis(discrete = TRUE, end = 0.8) +
theme_Publication(base_size = 16) +
scale_y_continuous(breaks = c(2500, seq(0, 60000, by = 10000)),
labels = label_comma(),
limits = c(0, 70000)) +
theme(legend.justification = c("center","top"),
legend.position = "top") +
scale_x_discrete(labels = c("Control", "ENU"))
dev.off()
setwd("/Users/ronaldcutler/Dropbox (EinsteinMed)/Vijg-lab/Projects/mutation accumulation/231009 multiple ENU analysis/4-mutation-burden")
# calculate estimated mutations
hg19_size <- 3036303846
sample_table$INDEL_est <- sample_table$INDEL_obs / sample_table$Cov / sample_table$Sen_INDEL * hg19_size
# ANOVA
lm_result <- lm(INDEL_est ~ condition * factor(cycle), data = sample_table)
emm_interaction <- emmeans(lm_result, ~ condition * factor(cycle))
pairwise_results <- pairs(emm_interaction)
adjusted_results <- na.omit(summary(pairwise_results, adjust = "tukey")) %>% add_significance("p.value")
write.csv(adjusted_results, "INDEL_estimated_mutation_stats.csv")
adjusted_results
pdf("INDEL_estimated_mutations_box.pdf",
width = 4,
height = 5)
main_plot <- ggplot(sample_table, aes(x = condition, y = INDEL_est, fill = factor(cycle))) +
geom_boxplot(outlier.shape = NA) +
geom_point(position = position_jitterdodge(jitter.width = 0.2), size = 2, alpha = 0.5) +
guides(fill = guide_legend(override.aes = list(shape = NA))) +
labs(x = "Condition", y = "Observed INDELs Per Cell", fill = "Cycle") +
scale_fill_viridis(discrete = TRUE, end = 0.8) +
theme_Publication() +
theme(legend.justification = c("center","top"),
legend.position = "top") +
scale_x_discrete(labels = c("Control", "ENU"))
dev.off()
pdf("INDEL_estimated_mutations_box.pdf",
width = 4,
height = 5)
main_plot <- ggplot(sample_table, aes(x = condition, y = INDEL_est, fill = factor(cycle))) +
geom_boxplot(outlier.shape = NA) +
geom_point(position = position_jitterdodge(jitter.width = 0.2), size = 2, alpha = 0.5) +
guides(fill = guide_legend(override.aes = list(shape = NA))) +
labs(x = "Condition", y = "Observed INDELs Per Cell", fill = "Cycle") +
scale_fill_viridis(discrete = TRUE, end = 0.8) +
theme_Publication() +
theme(legend.justification = c("center","top"),
legend.position = "top") +
scale_x_discrete(labels = c("Control", "ENU"))
dev.off()
stats_summary <- sample_table %>%
group_by(condition, cycle) %>%
summarise(mean = mean(INDEL_est, na.rm = TRUE),
sd = sd(INDEL_est, na.rm = TRUE))
pdf("INDEL_estimated_mutations_bar.pdf",
width = 4,
height = 5)
ggplot(sample_table, aes(x = condition, y = INDEL_est, fill = factor(cycle))) +
geom_bar(stat = "summary", fun.y = "mean", position = "dodge") +  # Average bar plot
geom_errorbar(data = stats_summary, aes(x = condition, fill = factor(cycle), y = mean, ymin = mean - sd, ymax = mean + sd),
width = 0.5, position = position_dodge(0.9)) +
geom_point(position = position_jitterdodge(jitter.width = 0.2), size = 2, alpha = 0.5) +
guides(fill = guide_legend(override.aes = list(shape = NA))) +
labs(x = "Condition", y = "Estimated INDELs Per Cell", fill = "Cycle") +
scale_fill_viridis(discrete = TRUE, end = 0.8) +
theme_Publication(base_size = 16) +
scale_y_continuous(breaks = c(2500, seq(0, 60000, by = 10000)),
labels = label_comma(),
limits = c(0, 70000)) +
theme(legend.justification = c("center","top"),
legend.position = "top") +
scale_x_discrete(labels = c("Control", "ENU"))
dev.off()
pdf("INDEL_estimated_mutations_bar.pdf",
width = 4,
height = 5)
ggplot(sample_table, aes(x = condition, y = INDEL_est, fill = factor(cycle))) +
geom_bar(stat = "summary", fun.y = "mean", position = "dodge") +  # Average bar plot
geom_errorbar(data = stats_summary, aes(x = condition, fill = factor(cycle), y = mean, ymin = mean - sd, ymax = mean + sd),
width = 0.5, position = position_dodge(0.9)) +
geom_point(position = position_jitterdodge(jitter.width = 0.2), size = 2, alpha = 0.5) +
guides(fill = guide_legend(override.aes = list(shape = NA))) +
labs(x = "Condition", y = "Estimated INDELs Per Cell", fill = "Cycle") +
scale_fill_viridis(discrete = TRUE, end = 0.8) +
theme_Publication(base_size = 16) +
theme(legend.justification = c("center","top"),
legend.position = "top") +
scale_x_discrete(labels = c("Control", "ENU"))
dev.off()
pdf("INDEL_estimated_mutations_bar.pdf",
width = 4,
height = 5)
ggplot(sample_table, aes(x = condition, y = INDEL_est, fill = factor(cycle))) +
geom_bar(stat = "summary", fun.y = "mean", position = "dodge") +  # Average bar plot
geom_errorbar(data = stats_summary, aes(x = condition, fill = factor(cycle), y = mean, ymin = mean - sd, ymax = mean + sd),
width = 0.5, position = position_dodge(0.9)) +
geom_point(position = position_jitterdodge(jitter.width = 0.2), size = 2, alpha = 0.5) +
guides(fill = guide_legend(override.aes = list(shape = NA))) +
labs(x = "Condition", y = "Estimated INDELs Per Cell", fill = "Cycle") +
scale_fill_viridis(discrete = TRUE, end = 0.8) +
theme_Publication(base_size = 16) +
theme(legend.justification = c("center","top"),
legend.position = "top") +
scale_x_discrete(labels = c("Control", "ENU")) +
ylim(0, 300)
dev.off()
setwd("/Users/ronaldcutler/Dropbox (EinsteinMed)/Vijg-lab/Projects/mutation accumulation/231009 multiple ENU analysis/4-mutation-burden")
# observed
sample_table$INDEL_SNV_ratio <- sample_table$INDEL_obs / sample_table$SNV_obs
# stats
lm_result <- lm(INDEL_est ~ condition * factor(cycle), data = sample_table)
emm_interaction <- emmeans(lm_result, ~ condition * factor(cycle))
pairwise_results <- pairs(emm_interaction)
adjusted_results <- na.omit(summary(pairwise_results, adjust = "tukey")) %>% add_significance("p.value")
write.csv(adjusted_results, "INDEL_estimated_mutation_stats.csv")
lm_result <- lm(INDEL_est ~ condition * factor(cycle), data = sample_table)
emm_interaction <- emmeans(lm_result, ~ condition * factor(cycle))
pairwise_results <- pairs(emm_interaction)
adjusted_results <- na.omit(summary(pairwise_results, adjust = "tukey")) %>% add_significance("p.value")
write.csv(adjusted_results, "INDEL_SNV_ratio_estimated_mutation_stats.csv")
lm_result <- lm(INDEL_est ~ condition * factor(cycle), data = sample_table)
emm_interaction <- emmeans(lm_result, ~ condition * factor(cycle))
pairwise_results <- pairs(emm_interaction)
adjusted_results <- na.omit(summary(pairwise_results, adjust = "tukey")) %>% add_significance("p.value")
write.csv(adjusted_results, "INDEL_estimated_mutation_stats.csv")
lm_result <- lm(INDEL_SNV_ratio ~ condition * factor(cycle), data = sample_table)
emm_interaction <- emmeans(lm_result, ~ condition * factor(cycle))
pairwise_results <- pairs(emm_interaction)
adjusted_results <- na.omit(summary(pairwise_results, adjust = "tukey")) %>% add_significance("p.value")
write.csv(adjusted_results, "INDEL_SNV_ratio_estimated_mutation_stats.csv")
adjusted_results
pdf("INDEL_SNV_ratio_observed_mutation_box.pdf",
width = 4,
height = 5)
ggplot(sample_table, aes(x = factor(cycle), y = INDEL_SNV_ratio, fill = condition)) +
geom_boxplot(outlier.shape = NA) +
geom_point(position = position_jitterdodge(jitter.width = 0.2), size = 2, alpha = 0.5) +
guides(fill = guide_legend(override.aes = list(shape = NA))) +
scale_y_continuous(breaks=seq(0,0.05,0.01), limits = c(0, 0.05)) +
labs(x = "Condition", y = "Estimated INDELs Per Cell", fill = "Cycle") +
scale_fill_viridis(discrete = TRUE, end = 0.8) +
theme_Publication(base_size = 16) +
theme(legend.justification = c("center","top"),
legend.position = "top") +
scale_x_discrete(labels = c("Control", "ENU"))
dev.off()
pdf("INDEL_SNV_ratio_observed_mutation_box.pdf",
width = 4,
height = 5)
ggplot(sample_table, aes(x = condition, y = INDEL_SNV_ratio, fill = factor(cycle))) +
geom_boxplot(outlier.shape = NA) +
geom_point(position = position_jitterdodge(jitter.width = 0.2), size = 2, alpha = 0.5) +
guides(fill = guide_legend(override.aes = list(shape = NA))) +
scale_y_continuous(breaks=seq(0,0.05,0.01), limits = c(0, 0.05)) +
labs(x = "Condition", y = "Estimated INDELs Per Cell", fill = "Cycle") +
scale_fill_viridis(discrete = TRUE, end = 0.8) +
theme_Publication(base_size = 16) +
theme(legend.justification = c("center","top"),
legend.position = "top") +
scale_x_discrete(labels = c("Control", "ENU"))
dev.off()
pdf("INDEL_SNV_ratio_observed_mutation_bar.pdf",
width = 4,
height = 5)
ggplot(sample_table, aes(x = factor(cycle), y = INDEL_SNV_ratio, fill = condition)) +
geom_bar(stat = "summary", fun.y = "mean", position = "dodge") +  # Average bar plot
geom_errorbar(data = stats_summary, aes(x = factor(cycle), fill = condition, y = mean, ymin = mean - sd, ymax = mean + sd),
width = 0.5, position = position_dodge(0.9)) +
geom_point(position = position_jitterdodge(jitter.width = 0.2), size = 2, alpha = 0.5) +
guides(fill = guide_legend(override.aes = list(shape = NA))) +
scale_y_continuous(breaks=seq(0,0.05,0.01), limits = c(0, 0.05)) +
labs(x = "Condition", y = "Estimated INDELs Per Cell", fill = "Cycle") +
scale_fill_viridis(discrete = TRUE, end = 0.8) +
theme_Publication(base_size = 16) +
theme(legend.justification = c("center","top"),
legend.position = "top") +
scale_x_discrete(labels = c("Control", "ENU"))
dev.off()
stats_summary <- sample_table %>%
group_by(cycle) %>%
summarise(mean = mean(INDEL_SNV_ratio, na.rm = TRUE),
sd = sd(INDEL_SNV_ratio, na.rm = TRUE))
pdf("INDEL_SNV_ratio_observed_mutation_bar.pdf",
width = 4,
height = 5)
ggplot(sample_table, aes(x = factor(cycle), y = INDEL_SNV_ratio, fill = condition)) +
geom_bar(stat = "summary", fun.y = "mean", position = "dodge") +  # Average bar plot
geom_errorbar(data = stats_summary, aes(x = factor(cycle), fill = condition, y = mean, ymin = mean - sd, ymax = mean + sd),
width = 0.5, position = position_dodge(0.9)) +
geom_point(position = position_jitterdodge(jitter.width = 0.2), size = 2, alpha = 0.5) +
guides(fill = guide_legend(override.aes = list(shape = NA))) +
scale_y_continuous(breaks=seq(0,0.05,0.01), limits = c(0, 0.05)) +
labs(x = "Condition", y = "Estimated INDELs Per Cell", fill = "Cycle") +
scale_fill_viridis(discrete = TRUE, end = 0.8) +
theme_Publication(base_size = 16) +
theme(legend.justification = c("center","top"),
legend.position = "top") +
scale_x_discrete(labels = c("Control", "ENU"))
stats_summary <- sample_table %>%
group_by(cycle, condition) %>%
summarise(mean = mean(INDEL_SNV_ratio, na.rm = TRUE),
sd = sd(INDEL_SNV_ratio, na.rm = TRUE))
pdf("INDEL_SNV_ratio_observed_mutation_bar.pdf",
width = 4,
height = 5)
ggplot(sample_table, aes(x = factor(cycle), y = INDEL_SNV_ratio, fill = condition)) +
geom_bar(stat = "summary", fun.y = "mean", position = "dodge") +  # Average bar plot
geom_errorbar(data = stats_summary, aes(x = factor(cycle), fill = condition, y = mean, ymin = mean - sd, ymax = mean + sd),
width = 0.5, position = position_dodge(0.9)) +
geom_point(position = position_jitterdodge(jitter.width = 0.2), size = 2, alpha = 0.5) +
guides(fill = guide_legend(override.aes = list(shape = NA))) +
scale_y_continuous(breaks=seq(0,0.05,0.01), limits = c(0, 0.05)) +
labs(x = "Condition", y = "Estimated INDELs Per Cell", fill = "Cycle") +
scale_fill_viridis(discrete = TRUE, end = 0.8) +
theme_Publication(base_size = 16) +
theme(legend.justification = c("center","top"),
legend.position = "top") +
scale_x_discrete(labels = c("Control", "ENU"))
dev.off()
stats_summary <- sample_table %>%
group_by(cycle, condition) %>%
summarise(mean = mean(INDEL_SNV_ratio, na.rm = TRUE),
sd = sd(INDEL_SNV_ratio, na.rm = TRUE))
pdf("INDEL_SNV_ratio_observed_mutation_bar.pdf",
width = 4,
height = 5)
ggplot(sample_table, aes(x = condition, y = INDEL_SNV_ratio, fill = factor(cycle))) +
geom_bar(stat = "summary", fun.y = "mean", position = "dodge") +  # Average bar plot
geom_errorbar(data = stats_summary, aes(x = condition, fill = factor(cycle), y = mean, ymin = mean - sd, ymax = mean + sd),
width = 0.5, position = position_dodge(0.9)) +
geom_point(position = position_jitterdodge(jitter.width = 0.2), size = 2, alpha = 0.5) +
guides(fill = guide_legend(override.aes = list(shape = NA))) +
scale_y_continuous(breaks=seq(0,0.05,0.01), limits = c(0, 0.05)) +
labs(x = "Condition", y = "Estimated INDELs Per Cell", fill = "Cycle") +
scale_fill_viridis(discrete = TRUE, end = 0.8) +
theme_Publication(base_size = 16) +
theme(legend.justification = c("center","top"),
legend.position = "top") +
scale_x_discrete(labels = c("Control", "ENU"))
dev.off()
# estimated
sample_table$INDEL_SNV_est_ratio <- sample_table$INDEL_est / sample_table$SNV_est
# stats
lm_result <- lm(INDEL_SNV_est_ratio ~ condition * factor(cycle), data = sample_table)
emm_interaction <- emmeans(lm_result, ~ condition * factor(cycle))
pairwise_results <- pairs(emm_interaction)
adjusted_results <- na.omit(summary(pairwise_results, adjust = "tukey")) %>% add_significance("p.value")
write.csv(adjusted_results, "INDEL_SNV_ratio_estimated_mutation_stats.csv")
# bar plot
stats_summary <- sample_table %>%
group_by(condition, cycle) %>%
summarise(mean = mean(INDEL_SNV_est_ratio, na.rm = TRUE),
sd = sd(INDEL_SNV_est_ratio, na.rm = TRUE))
pdf("INDEL_SNV_ratio_estimated_mutation_bar.pdf",
width = 4,
height = 5)
ggplot(sample_table, aes(x = condition, y = INDEL_SNV_est_ratio, fill = factor(cycle))) +
geom_bar(stat = "summary", fun.y = "mean", position = "dodge") +  # Average bar plot
geom_errorbar(data = stats_summary, aes(x = condition, fill = factor(cycle), y = mean, ymin = mean - sd, ymax = mean + sd),
width = 0.5, position = position_dodge(0.9)) +
geom_point(position = position_jitterdodge(jitter.width = 0.2), size = 2, alpha = 0.5) +
guides(fill = guide_legend(override.aes = list(shape = NA))) +
#scale_y_continuous(breaks=seq(0,0.05,0.01), limits = c(0, 0.05)) +
labs(x = "Condition", y = "Estimated INDELs Per Cell", fill = "Cycle") +
scale_fill_viridis(discrete = TRUE, end = 0.8) +
theme_Publication(base_size = 16) +
theme(legend.justification = c("center","top"),
legend.position = "top") +
scale_x_discrete(labels = c("Control", "ENU"))
dev.off()
