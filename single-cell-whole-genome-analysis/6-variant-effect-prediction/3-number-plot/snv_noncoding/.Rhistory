pvalue <= 0.0001 ~ '****',
pvalue <= 0.001 ~ '***',
pvalue <= 0.01 ~ '**',
pvalue <= 0.05 ~ '*',
TRUE ~ NA))
}
# function to calculate significance between condition groups
group_significance <- function(combined_regions, group_vars, condition, group_levels){
formula <- as.formula(paste("obs.mut ~", condition))
results <- combined_regions %>%
group_by_at(vars(one_of(group_vars))) %>%
summarise(
p_value = wilcox.test(formula = formula,
data = cur_data(),
exact = FALSE)$p.value
) %>%
ungroup() %>%
mutate(p_adjusted = p.adjust(p_value, method = "BH"),
significant_p_adjusted = case_when(
p_adjusted <= 0.0001 ~ '****',
p_adjusted <= 0.001 ~ '***',
p_adjusted <= 0.01 ~ '**',
p_adjusted <= 0.05 ~ '*',
TRUE ~ NA_character_)
)
# Order by region
results$variant_type <- factor(results$variant_type, levels = group_levels)
return(results)
}
calculate_stat_summary <- function(observed, group_vars, mut_var){
results <- observed %>%
group_by_at(vars(one_of(group_vars))) %>%
summarise(mean = mean(!!sym(mut_var), na.rm = TRUE),
sd = sd(!!sym(mut_var), na.rm = TRUE))
}
theme_Publication <- function(base_size=16, base_family="helvetica") {
library(grid)
library(ggthemes)
(theme_foundation(base_size=base_size, base_family = "")
+ theme(plot.title = element_text(face = "bold",
size = rel(1.2), hjust = 0.5),
text = element_text(),
panel.background = element_rect(colour = NA),
plot.background = element_rect(colour = NA),
panel.border = element_rect(colour = NA),
axis.title = element_text(face = "bold",size = rel(1)),
axis.title.y = element_text(angle=90,vjust =2),
axis.title.x = element_text(vjust = -0.2),
axis.text = element_text(),
axis.line = element_line(colour="black"),
axis.ticks = element_line(),
panel.grid.major = element_line(colour="#f0f0f0"),
panel.grid.minor = element_blank(),
legend.key = element_rect(colour = NA),
legend.position = "bottom",
legend.direction = "horizontal",
#legend.key.size= unit(0.2, "cm"),
legend.margin = unit(0, "cm"),
legend.title = element_text(face="italic"),
plot.margin=unit(c(10,5,5,5),"mm"),
strip.background=element_rect(colour="#f0f0f0",fill="#f0f0f0"),
strip.text = element_text(face="bold")
))
}
scale_fill_Publication <- function(...){
library(scales)
discrete_scale("fill","Publication",manual_pal(values = c("#386cb0","#fdb462","#7fc97f","#ef3b2c","#662506","#a6cee3","#fb9a99","#984ea3","#ffff33")), ...)
}
scale_fill_Publication_2 <- function(...){
library(scales)
discrete_scale("fill","Publication",manual_pal(values = c("#7fc97f","#ef3b2c","#386cb0","#fdb462","#662506","#a6cee3","#fb9a99","#984ea3","#ffff33")), ...)
}
scale_colour_Publication <- function(...){
library(scales)
discrete_scale("colour","Publication",manual_pal(values = c("#386cb0","#fdb462","#7fc97f","#ef3b2c","#662506","#a6cee3","#fb9a99","#984ea3","#ffff33")), ...)
}
wrap_labels <- function(labels, width = 5) {
wrapped_labels <- str_wrap(labels, width)
names(wrapped_labels) <- names(labels)
return(wrapped_labels)
}
# Chunk 1: setup
knitr::opts_chunk$set(echo = TRUE)
# Chunk 2
library(ggplot2)
library(stringr)
library(dplyr)
library(ggpubr)
library(purrr)
library(rstatix)
library(emmeans)
library(viridis)
# Chunk 3
# combine the permutation pvalues from each sample
# to assess if group of samples is significantly different from expected
combine_pvalues_fisher <- function(p_values) {
chi_sq_stat = -2 * sum(log(p_values))
degrees_of_freedom = 2 * length(p_values)
p_combined = pchisq(chi_sq_stat, degrees_of_freedom, lower.tail = FALSE)
return(p_combined)
}
# function to calculate significance with results coming from
# observed and downsampled
ratio_significance <- function(ratios, group_vars) {
res <- ratios %>%
group_by_at(vars(one_of(group_vars))) %>%
summarise(pvalue = combine_pvalues_fisher(pvalue)) %>%
mutate(pvalue_symbol = case_when(
pvalue <= 0.0001 ~ '****',
pvalue <= 0.001 ~ '***',
pvalue <= 0.01 ~ '**',
pvalue <= 0.05 ~ '*',
TRUE ~ NA))
}
# function to calculate significance between condition groups
group_significance <- function(combined_regions, group_vars, condition, group_levels){
formula <- as.formula(paste("obs.mut ~", condition))
results <- combined_regions %>%
group_by_at(vars(one_of(group_vars))) %>%
summarise(
p_value = wilcox.test(formula = formula,
data = cur_data(),
exact = FALSE)$p.value
) %>%
ungroup() %>%
mutate(p_adjusted = p.adjust(p_value, method = "BH"),
significant_p_adjusted = case_when(
p_adjusted <= 0.0001 ~ '****',
p_adjusted <= 0.001 ~ '***',
p_adjusted <= 0.01 ~ '**',
p_adjusted <= 0.05 ~ '*',
TRUE ~ NA_character_)
)
# Order by region
results$variant_type <- factor(results$variant_type, levels = group_levels)
return(results)
}
calculate_stat_summary <- function(observed, group_vars, mut_var){
results <- observed %>%
group_by_at(vars(one_of(group_vars))) %>%
summarise(mean = mean(!!sym(mut_var), na.rm = TRUE),
sd = sd(!!sym(mut_var), na.rm = TRUE))
}
theme_Publication <- function(base_size=16, base_family="helvetica") {
library(grid)
library(ggthemes)
(theme_foundation(base_size=base_size, base_family = "")
+ theme(plot.title = element_text(face = "bold",
size = rel(1.2), hjust = 0.5),
text = element_text(),
panel.background = element_rect(colour = NA),
plot.background = element_rect(colour = NA),
panel.border = element_rect(colour = NA),
axis.title = element_text(face = "bold",size = rel(1)),
axis.title.y = element_text(angle=90,vjust =2),
axis.title.x = element_text(vjust = -0.2),
axis.text = element_text(),
axis.line = element_line(colour="black"),
axis.ticks = element_line(),
panel.grid.major = element_line(colour="#f0f0f0"),
panel.grid.minor = element_blank(),
legend.key = element_rect(colour = NA),
legend.position = "bottom",
legend.direction = "horizontal",
#legend.key.size= unit(0.2, "cm"),
legend.margin = unit(0, "cm"),
legend.title = element_text(face="italic"),
plot.margin=unit(c(10,5,5,5),"mm"),
strip.background=element_rect(colour="#f0f0f0",fill="#f0f0f0"),
strip.text = element_text(face="bold")
))
}
scale_fill_Publication <- function(...){
library(scales)
discrete_scale("fill","Publication",manual_pal(values = c("#386cb0","#fdb462","#7fc97f","#ef3b2c","#662506","#a6cee3","#fb9a99","#984ea3","#ffff33")), ...)
}
scale_fill_Publication_2 <- function(...){
library(scales)
discrete_scale("fill","Publication",manual_pal(values = c("#7fc97f","#ef3b2c","#386cb0","#fdb462","#662506","#a6cee3","#fb9a99","#984ea3","#ffff33")), ...)
}
scale_colour_Publication <- function(...){
library(scales)
discrete_scale("colour","Publication",manual_pal(values = c("#386cb0","#fdb462","#7fc97f","#ef3b2c","#662506","#a6cee3","#fb9a99","#984ea3","#ffff33")), ...)
}
wrap_labels <- function(labels, width = 5) {
wrapped_labels <- str_wrap(labels, width)
names(wrapped_labels) <- names(labels)
return(wrapped_labels)
}
# Chunk 4
sample_table <- read.table("/Users/ronaldcutler/Dropbox\ (EinsteinMed)/Vijg-lab/Projects/mutation\ accumulation/231009\ multiple\ ENU\ analysis/1-data/sample_table_filtered.txt", header = TRUE, sep = "\t")
# Chunk 5
setwd("/Users/ronaldcutler/Dropbox\ (EinsteinMed)/Vijg-lab/Projects/mutation\ accumulation/231009\ multiple\ ENU\ analysis/5-variant-effect-prediction/1-calculate-ratio")
# consequences
consequences.main.mean <- read.csv("consequence_main_oe_mean.csv", header = TRUE, row.names = NULL)
# consequences.main.median <- read.csv("consequence_main_oe_mean.csv", header = TRUE, row.names = NULL)
# # consequences.sub.mean <- read.csv("observed_consequence_subtypes_ratio_mean.csv", header = TRUE, row.names = NULL)
# # consequences.sub.median <- read.csv("observed_consequence_subtypes_ratio_median.csv", header = TRUE, row.names = NULL)
# consequences.syn_non.mean <- read.csv("observed_consequence_synonymous_nonsynonymous_ratio_mean.csv", header = TRUE, row.names = NULL)
# consequences.syn_non.median <- read.csv("observed_consequence_synonymous_nonsynonymous_ratio_median.csv", header = TRUE, row.names = NULL)
# alpha missense - score above 0.564 likely pathogenic. range 0-Inf
# use absolute
# am.mean <- read.csv("observed_alpha-missense_absolute_ratio_mean.csv", header = TRUE, row.names = NULL)
# am.median <- read.csv("observed_alpha-missense_absolute_ratio_median.csv", header = TRUE, row.names = NULL)
# am.sum <- read.csv("observed_alpha-missense_absolute_ratio_sum.csv", header = TRUE, row.names = NULL)
# cadd - observed variant has negative values while simulated variant has positive values - more positive more damaging
# need to redo and classify into observed and simulated and then count
# classify into insertion and deletion
# use non-absolute
cadd.mean <- read.csv("cadd_phred_oe_mean.csv", header = TRUE, row.names = NULL)
# gerp - score above 2 indicates constrained site. Range from -12 to 6
# need to redo and classify into constrained and non and then count
# also need to prevent NA in control when calculating ratio
# use non-absolute and mean
# gerp.mean <- read.csv("observed_gerp_non-absolute_ratio_mean.csv", header = TRUE, row.names = NULL)
# gerp.median <- read.csv("observed_gerp_non-absolute_ratio_median.csv", header = TRUE, row.names = NULL)
# transcription factor score change
# use absolute
# tf.mean <- read.csv("observed_tf_absolute_ratio_mean.csv", header = TRUE, row.names = NULL)
# tf.median <- read.csv("observed_tf_absolute_ratio_median.csv", header = TRUE, row.names = NULL)
# tf.sum <- read.csv("observed_tf_absolute_ratio_sum.csv", header = TRUE, row.names = NULL)
# phyloP - conserved sites are positive and non-conserved are negative
# need to redo and classify into conserved and non-conserved and then count
# use non-absolute
# phylop.mean <- read.csv("observed_phylop_non-absolute_ratio_mean.csv", header = TRUE, row.names = NULL)
# phylop.median <- read.csv("observed_phylop_non-absolute_ratio_median.csv", header = TRUE, row.names = NULL)
# phastcons - probability of negative selection from 0-1
# use non-absolute
# phastcons.mean <- read.csv("observed_phastCons_non-absolute_ratio_mean.csv", header = TRUE, row.names = NULL)
# phastcons.median <- read.csv("observed_phastCons_non-absolute_ratio_median.csv", header = TRUE, row.names = NULL)
# phastcons.sum <- read.csv("observed_phastCons_non-absolute_ratio_sum.csv", header = TRUE, row.names = NULL)
consequences.main.mean <- merge(consequences.main.mean,
sample_table,
by = "sample")
print(consequences.main.mean %>%
group_by(variant_type) %>%
summarize(total = sum(obs.mut)),
n = Inf)
print(consequences.syn_non.mean %>%
group_by(variant_type) %>%
summarize(total = sum(obs.mut)),
n = Inf)
dir.create("/Users/ronaldcutler/Dropbox\ (EinsteinMed)/Vijg-lab/Projects/mutation\ accumulation/231009\ multiple\ ENU\ analysis/5-variant-effect-prediction/3-number-plot/consequences/cycle/snv_noncoding")
setwd("/Users/ronaldcutler/Dropbox\ (EinsteinMed)/Vijg-lab/Projects/mutation\ accumulation/231009\ multiple\ ENU\ analysis/5-variant-effect-prediction/3-number-plot/consequences/cycle/snv_noncoding")
# subset
consequences_levels <- c("intergenic variant",
"intron variant",
"upstream gene variant",
"downstream gene variant",
"3 prime UTR variant",
"non coding transcript exon variant",
"5 prime UTR variant",
"splice region variant",
"TF binding site variant",
"mature miRNA variant")
consequences.main.mean.snv.code <- subset(consequences.main.mean, variant_type %in% consequences_levels)
consequences.main.mean.snv.code$variant_type <- factor(consequences.main.mean.snv.code$variant_type, levels = consequences_levels)
# stats
for (variant in unique(consequences.main.mean.snv.code$variant_type)) {
filtered_data <- consequences.main.mean.snv.code %>%
filter(variant_type == variant)
# Perform ANOVA
anova_result <- summary(aov(obs.mut ~ condition * cycle, data = filtered_data))
# Perform linear model
lm_result <- lm(obs.mut ~ condition * cycle, data = filtered_data)
# Compute emmeans and pairwise comparisons
emm_interaction <- emmeans(lm_result, ~ condition * cycle)
pairwise_results <- pairs(emm_interaction)
# Adjust for multiple comparisons and add significance
adjusted_results <- na.omit(summary(pairwise_results, adjust = "tukey")) %>%
add_significance("p.value")
# Construct the output filename
output_filename <- paste("consequences_cycle_main_snv_noncode_stats_",
gsub(" ", "_", variant), ".csv", sep = "")
# Write the results to a CSV file
write.csv(adjusted_results, output_filename)
anova_summary_text <- write(capture.output(anova_result),
file = output_filename,
append = TRUE,
sep = "\n")
}
# get mean and sd for each group
stats_summary <- consequences.main.mean.snv.code %>%
group_by(condition, cycle, variant_type) %>%
summarise(mean = mean(obs.mut, na.rm = TRUE),
sd = sd(obs.mut, na.rm = TRUE))
write.csv(stats_summary, "consequences_cycle_main_snv_noncode_stat_summary.csv")
# new facet labels
labels <- c("Intergenic",
"Intron",
"5KB Upstream",
"5KB Downstream",
"3' UTR",
"lncRNA",
"5' UTR",
"Splice Region",
"TF Binding Site",
"miRNA")
names(labels) <- consequences_levels
# box plot
pdf("consequences_cycle_main_nonsnv_code.pdf",
width = 8,
height = 5.5)
ggplot(consequences.main.mean.snv.code, aes(x = condition, y = obs.mut, fill = cycle)) +
geom_bar(stat = "summary", fun.y = "mean", position = "dodge") +  # Average bar plot
geom_errorbar(data = stats_summary, aes(x = condition, fill = cycle, y = mean, ymin = mean - sd, ymax = mean + sd),
width = 0.5, position = position_dodge(0.9)) +
geom_point(size = 2, alpha = 0.5, position = position_dodge(width = 0.75)) +
guides(fill = guide_legend(override.aes = list(shape = NA))) +
labs(x = "", y = "Observed Variants Per Cell", fill = "Cycle") +
scale_fill_viridis(discrete = TRUE, end = 0.8) +
theme_Publication() +
theme(legend.position = "top",  # Place legend on the right side
legend.box = "horizontal",  # Stack legend items vertically
legend.text = element_text(size = 10),  # Adjust legend text size
legend.title = element_text(size = 12)) +  # Adjust legend title size
scale_x_discrete(labels = c("Control", "ENU")) +
scale_y_continuous(trans=scales::pseudo_log_trans(base = 10), breaks = c(1, 10, 100, 1000, 10000)) +
facet_wrap(.~variant_type,
scale = "fixed",
nrow = 1,
labeller = labeller(variant_type = wrap_labels(labels, width = 10)))
consequences.main.mean.snv.code
pdf("consequences_cycle_main_nonsnv_code.pdf",
width = 8,
height = 5.5)
ggplot(consequences.main.mean.snv.code, aes(x = condition, y = obs.mut, fill = cycle)) +
geom_bar(stat = "summary", fun.y = "mean", position = "dodge") +  # Average bar plot
geom_errorbar(data = stats_summary, aes(x = condition, fill = cycle, y = mean, ymin = mean - sd, ymax = mean + sd),
width = 0.5, position = position_dodge(0.9)) +
geom_point(size = 2, alpha = 0.5, position = position_dodge(width = 0.75)) +
guides(fill = guide_legend(override.aes = list(shape = NA))) +
labs(x = "", y = "Observed Variants Per Cell", fill = "Cycle") +
scale_fill_viridis(discrete = TRUE, end = 0.8) +
theme_Publication() +
theme(legend.position = "top",  # Place legend on the right side
legend.box = "horizontal",  # Stack legend items vertically
legend.text = element_text(size = 10),  # Adjust legend text size
legend.title = element_text(size = 12)) +  # Adjust legend title size
scale_x_discrete(labels = c("Control", "ENU")) +
scale_y_continuous(trans=scales::pseudo_log_trans(base = 10), breaks = c(1, 10, 100, 1000, 10000)) +
facet_wrap(.~variant_type,
scale = "fixed",
nrow = 1,
labeller = labeller(variant_type = wrap_labels(labels, width = 10)))
stats_summary
pdf("consequences_cycle_main_nonsnv_code.pdf",
width = 8,
height = 5.5)
ggplot(consequences.main.mean.snv.code, aes(x = condition, y = obs.mut, fill = cycle)) +
geom_bar(stat = "summary", fun.y = "mean", position = "dodge") +  # Average bar plot
geom_errorbar(data = stats_summary, aes(x = condition, fill = cycle, y = mean, ymin = mean - sd, ymax = mean + sd),
width = 0.5, position = position_dodge(0.9)) +
geom_point(size = 2, alpha = 0.5, position = position_dodge(width = 0.75)) +
guides(fill = guide_legend(override.aes = list(shape = NA))) +
labs(x = "", y = "Observed Variants Per Cell", fill = "Cycle") +
scale_fill_viridis(discrete = TRUE, end = 0.8) +
theme_Publication() +
theme(legend.position = "top",  # Place legend on the right side
legend.box = "horizontal",  # Stack legend items vertically
legend.text = element_text(size = 10),  # Adjust legend text size
legend.title = element_text(size = 12)) +  # Adjust legend title size
scale_x_discrete(labels = c("Control", "ENU")) +
scale_y_continuous(trans=scales::pseudo_log_trans(base = 10), breaks = c(1, 10, 100, 1000, 10000)) +
facet_wrap(.~variant_type,
scale = "fixed",
nrow = 2,
labeller = labeller(variant_type = wrap_labels(labels, width = 10)))
pdf("consequences_cycle_main_nonsnv_code.pdf",
width = 8,
height = 5.5)
ggplot(consequences.main.mean.snv.code, aes(x = condition, y = obs.mut, fill = cycle)) +
geom_bar(stat = "summary", fun.y = "mean", position = "dodge") +  # Average bar plot
geom_errorbar(data = stats_summary, aes(x = condition, fill = cycle, y = mean, ymin = mean - sd, ymax = mean + sd),
width = 0.5, position = position_dodge(0.9)) +
geom_point(size = 2, alpha = 0.5, position = position_dodge(width = 0.75)) +
# guides(fill = guide_legend(override.aes = list(shape = NA))) +
# labs(x = "", y = "Observed Variants Per Cell", fill = "Cycle") +
# scale_fill_viridis(discrete = TRUE, end = 0.8) +
# theme_Publication() +
# theme(legend.position = "top",  # Place legend on the right side
#     legend.box = "horizontal",  # Stack legend items vertically
#     legend.text = element_text(size = 10),  # Adjust legend text size
#     legend.title = element_text(size = 12)) +  # Adjust legend title size
# scale_x_discrete(labels = c("Control", "ENU")) +
# scale_y_continuous(trans=scales::pseudo_log_trans(base = 10), breaks = c(1, 10, 100, 1000, 10000)) +
facet_wrap(.~variant_type,
scale = "fixed",
nrow = 2,
labeller = labeller(variant_type = wrap_labels(labels, width = 10)))
dev.off()
dir.create("/Users/ronaldcutler/Dropbox\ (EinsteinMed)/Vijg-lab/Projects/mutation\ accumulation/231009\ multiple\ ENU\ analysis/5-variant-effect-prediction/3-number-plot/consequences/cycle/snv_noncoding")
setwd("/Users/ronaldcutler/Dropbox\ (EinsteinMed)/Vijg-lab/Projects/mutation\ accumulation/231009\ multiple\ ENU\ analysis/5-variant-effect-prediction/3-number-plot/consequences/cycle/snv_noncoding")
# subset
consequences_levels <- c("intergenic variant",
"intron variant",
"upstream gene variant",
"downstream gene variant",
"3 prime UTR variant",
"non coding transcript exon variant",
"5 prime UTR variant",
"splice region variant",
"TF binding site variant",
"mature miRNA variant")
consequences.main.mean.snv.code <- subset(consequences.main.mean, variant_type %in% consequences_levels)
consequences.main.mean.snv.code$variant_type <- factor(consequences.main.mean.snv.code$variant_type, levels = consequences_levels)
consequences.main.mean.snv.code$cycle <- factor(cycle)
dir.create("/Users/ronaldcutler/Dropbox\ (EinsteinMed)/Vijg-lab/Projects/mutation\ accumulation/231009\ multiple\ ENU\ analysis/5-variant-effect-prediction/3-number-plot/consequences/cycle/snv_noncoding")
setwd("/Users/ronaldcutler/Dropbox\ (EinsteinMed)/Vijg-lab/Projects/mutation\ accumulation/231009\ multiple\ ENU\ analysis/5-variant-effect-prediction/3-number-plot/consequences/cycle/snv_noncoding")
# subset
consequences_levels <- c("intergenic variant",
"intron variant",
"upstream gene variant",
"downstream gene variant",
"3 prime UTR variant",
"non coding transcript exon variant",
"5 prime UTR variant",
"splice region variant",
"TF binding site variant",
"mature miRNA variant")
consequences.main.mean.snv.code <- subset(consequences.main.mean, variant_type %in% consequences_levels)
consequences.main.mean.snv.code$variant_type <- factor(consequences.main.mean.snv.code$variant_type, levels = consequences_levels)
consequences.main.mean.snv.code$cycle <- factor(consequences.main.mean.snv.code$cycle)
# stats
for (variant in unique(consequences.main.mean.snv.code$variant_type)) {
filtered_data <- consequences.main.mean.snv.code %>%
filter(variant_type == variant)
# Perform ANOVA
anova_result <- summary(aov(obs.mut ~ condition * cycle, data = filtered_data))
# Perform linear model
lm_result <- lm(obs.mut ~ condition * cycle, data = filtered_data)
# Compute emmeans and pairwise comparisons
emm_interaction <- emmeans(lm_result, ~ condition * cycle)
pairwise_results <- pairs(emm_interaction)
# Adjust for multiple comparisons and add significance
adjusted_results <- na.omit(summary(pairwise_results, adjust = "tukey")) %>%
add_significance("p.value")
# Construct the output filename
output_filename <- paste("consequences_cycle_main_snv_noncode_stats_",
gsub(" ", "_", variant), ".csv", sep = "")
# Write the results to a CSV file
write.csv(adjusted_results, output_filename)
anova_summary_text <- write(capture.output(anova_result),
file = output_filename,
append = TRUE,
sep = "\n")
}
# get mean and sd for each group
stats_summary <- consequences.main.mean.snv.code %>%
group_by(condition, cycle, variant_type) %>%
summarise(mean = mean(obs.mut, na.rm = TRUE),
sd = sd(obs.mut, na.rm = TRUE))
write.csv(stats_summary, "consequences_cycle_main_snv_noncode_stat_summary.csv")
# new facet labels
labels <- c("Intergenic",
"Intron",
"5KB Upstream",
"5KB Downstream",
"3' UTR",
"lncRNA",
"5' UTR",
"Splice Region",
"TF Binding Site",
"miRNA")
names(labels) <- consequences_levels
# box plot
pdf("consequences_cycle_main_nonsnv_code.pdf",
width = 8,
height = 5.5)
ggplot(consequences.main.mean.snv.code, aes(x = condition, y = obs.mut, fill = cycle)) +
geom_bar(stat = "summary", fun.y = "mean", position = "dodge") +  # Average bar plot
geom_errorbar(data = stats_summary, aes(x = condition, fill = cycle, y = mean, ymin = mean - sd, ymax = mean + sd),
width = 0.5, position = position_dodge(0.9)) +
geom_point(size = 2, alpha = 0.5, position = position_dodge(width = 0.75)) +
guides(fill = guide_legend(override.aes = list(shape = NA))) +
labs(x = "", y = "Observed Variants Per Cell", fill = "Cycle") +
scale_fill_viridis(discrete = TRUE, end = 0.8) +
# theme_Publication() +
# theme(legend.position = "top",  # Place legend on the right side
#     legend.box = "horizontal",  # Stack legend items vertically
#     legend.text = element_text(size = 10),  # Adjust legend text size
#     legend.title = element_text(size = 12)) +  # Adjust legend title size
# scale_x_discrete(labels = c("Control", "ENU")) +
# scale_y_continuous(trans=scales::pseudo_log_trans(base = 10), breaks = c(1, 10, 100, 1000, 10000)) +
facet_wrap(.~variant_type,
scale = "fixed",
nrow = 2,
labeller = labeller(variant_type = wrap_labels(labels, width = 10)))
dev.off()
pdf("consequences_cycle_main_nonsnv_code.pdf",
width = 8,
height = 5.5)
ggplot(consequences.main.mean.snv.code, aes(x = condition, y = obs.mut, fill = cycle)) +
geom_bar(stat = "summary", fun.y = "mean", position = "dodge") +  # Average bar plot
geom_errorbar(data = stats_summary, aes(x = condition, fill = cycle, y = mean, ymin = mean - sd, ymax = mean + sd),
width = 0.5, position = position_dodge(0.9)) +
geom_point(size = 2, alpha = 0.5, position = position_dodge(width = 0.75)) +
guides(fill = guide_legend(override.aes = list(shape = NA))) +
labs(x = "", y = "Observed Variants Per Cell", fill = "Cycle") +
scale_fill_viridis(discrete = TRUE, end = 0.8) +
theme_Publication() +
theme(legend.position = "top",  # Place legend on the right side
legend.box = "horizontal",  # Stack legend items vertically
legend.text = element_text(size = 10),  # Adjust legend text size
legend.title = element_text(size = 12)) +  # Adjust legend title size
scale_x_discrete(labels = c("Control", "ENU")) +
scale_y_continuous(trans=scales::pseudo_log_trans(base = 10), breaks = c(1, 10, 100, 1000, 10000)) +
facet_wrap(.~variant_type,
scale = "fixed",
nrow = 2,
labeller = labeller(variant_type = wrap_labels(labels, width = 10)))
dev.off()
