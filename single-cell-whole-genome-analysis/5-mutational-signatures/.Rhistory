pdf("SNV_spectrum_sample.pdf",
width = 10,
height = 10)
plot_spectrum(type_occurrences,
CT = TRUE,
indv_points = TRUE,
legend = FALSE,
error_bars = 'stdev',
by = sample_table$sample,
condensed = T)
dev.off()
pdf("SNV_spectrum_condition.pdf",
width = 6,
height = 5)
plot_spectrum(type_occurrences,
CT = TRUE,
indv_points = TRUE,
legend = TRUE,
error_bars = 'stdev',
by = sample_table$condition,
condensed = T)
dev.off()
pdf("SNV_spectrum_condition_cycle.pdf",
width = 6,
height = 5)
plot_spectrum(type_occurrences,
CT = TRUE,
indv_points = TRUE,
legend = FALSE,
error_bars = 'stdev',
by = sample_table$condition_cycle,
condensed = T)
dev.off()
knitr::opts_chunk$set(echo = TRUE)
library(VariantAnnotation)
library(GenomicRanges)
library(rtracklayer)
library(vcfR)
library(MutationalPatterns)
library(BSgenome.Hsapiens.UCSC.hg19)
library(ggplot2)
library(tibble)
export_GRanges_to_VCF <- function(gr_obj, sample_name) {
# Step 1: Convert to data frame
gr_df <- as.data.frame(gr_obj)
# Step 2: Convert columns to appropriate types
gr_df$REF <- as.character(gr_df$REF)
gr_df$ALT <- sapply(gr_df$ALT, function(alt) {
as.character(alt)[1]
})
# Step 3: Generate paramRangeID if necessary
gr_df$paramRangeID <- paste0(gr_df$seqnames, ":", gr_df$start, "_", gr_df$REF, "/", gr_df$ALT)
# Step 4: Create VCF header
vcf_header <- paste0('##fileformat=VCFv4.3\n',
'#CHROM\tPOS\tID\tREF\tALT\tQUAL\tFILTER\tINFO\tFORMAT\t',
sample_name)
# Step 5: Generate VCF body
vcf_body <- apply(gr_df, 1, function(row) {
paste(row['seqnames'], row['start'], row['paramRangeID'], row['REF'], row['ALT'], row['QUAL'], row['FILTER'], '.', '.', '.', sep = '\t')
})
vcf_body <- paste(vcf_body, collapse = '\n')
# Step 6: Combine header and body and write to file
vcf_text <- paste(vcf_header, vcf_body, sep = '\n')
writeLines(vcf_text, paste0(sample_name, ".vcf"))
}
overlap_validate <- function(gr_list){
# compare the overlapping entries and give a logical which
# tells us if the entry is exactly the same (same mutation at same position)
overlap_results <- list()
check_results <- list()
for(i in 1:(length(gr_list) - 1)) {
for(j in (i + 1):length(gr_list)) {
# Identify overlaps between gr_list[[i]] and gr_list[[j]]
overlaps_ij <- findOverlaps(gr_list[[i]], gr_list[[j]])
checks <- logical(0)
if (length(overlaps_ij) > 0) {
for(x in 1:length(overlaps_ij)){
# validate overlaps
checks <- c(checks, gr_list[[i]][queryHits(overlaps_ij[x])] == gr_list[[j]][subjectHits(overlaps_ij[x])])
}
}
# Store in the list
#overlap_results[[paste0(names(gr_list)[i], "_vs_", names(gr_list)[j])]] <- overlaps_ij
check_results[[paste0(names(gr_list)[i], "_vs_", names(gr_list)[j])]] <- checks
}
}
return(check_results)
}
theme_Publication <- function(base_size=16, base_family="helvetica") {
library(grid)
library(ggthemes)
(theme_foundation(base_size=base_size, base_family = "")
+ theme(plot.title = element_text(face = "bold",
size = rel(1.2), hjust = 0.5),
text = element_text(),
panel.background = element_rect(colour = NA),
plot.background = element_rect(colour = NA),
panel.border = element_rect(colour = NA),
axis.title = element_text(face = "bold",size = rel(1)),
axis.title.y = element_text(angle=90,vjust =2),
axis.title.x = element_text(vjust = -0.2),
axis.text = element_text(),
axis.line = element_line(colour="black"),
axis.ticks = element_line(),
panel.grid.major = element_line(colour="#f0f0f0"),
panel.grid.minor = element_blank(),
legend.key = element_rect(colour = NA),
legend.position = "bottom",
legend.direction = "horizontal",
#legend.key.size= unit(0.2, "cm"),
legend.margin = unit(0, "cm"),
legend.title = element_text(face="italic"),
plot.margin=unit(c(10,5,5,5),"mm"),
strip.background=element_rect(colour="#f0f0f0",fill="#f0f0f0"),
strip.text = element_text(face="bold")
))
}
scale_fill_Publication <- function(...){
library(scales)
discrete_scale("fill","Publication",manual_pal(values = c("#386cb0","#fdb462","#7fc97f","#ef3b2c","#662506","#a6cee3","#fb9a99","#984ea3","#ffff33")), ...)
}
scale_colour_Publication <- function(...){
library(scales)
discrete_scale("colour","Publication",manual_pal(values = c("#386cb0","#fdb462","#7fc97f","#ef3b2c","#662506","#a6cee3","#fb9a99","#984ea3","#ffff33")), ...)
}
vcf_files <- list.files(path = "/Users/ronaldcutler/Dropbox\ (EinsteinMed)/Vijg-lab/Projects/mutation\ accumulation/231009\ multiple\ ENU\ analysis/1-data/final",
pattern = "\\.vcf$", full.names = TRUE)
sample_table <- read.table("/Users/ronaldcutler/Dropbox\ (EinsteinMed)/Vijg-lab/Projects/mutation\ accumulation/231009\ multiple\ ENU\ analysis/1-data/sample_table.txt", header = TRUE, sep = "\t")
# reorder vcf_files to match sample_table
vcf_files <- vcf_files[match(sample_table$sample,tools::file_path_sans_ext(basename(vcf_files)))]
mutations <- read_vcfs_as_granges(vcf_files, sample_table$sample, BSgenome.Hsapiens.UCSC.hg19, type = "all")
mutations_snv <- read_vcfs_as_granges(vcf_files, sample_table$sample, BSgenome.Hsapiens.UCSC.hg19, type = "snv")
mutations_indel <- read_vcfs_as_granges(vcf_files, sample_table$sample, BSgenome.Hsapiens.UCSC.hg19, type = "indel")
# get list of variants for each cycle and put this into a list
variants_list <- list(mutations_snv[sample_table$cycle == 1],
mutations_snv[sample_table$cycle == 3],
mutations_snv[sample_table$cycle == 6],
mutations_snv[sample_table$cycle == 9 & sample_table$condition == "control" & sample_table$batch == 2],
mutations_snv[sample_table$cycle == 9 & sample_table$condition == "enu" & sample_table$batch == 2],
mutations_snv[sample_table$cycle == 9 & sample_table$condition == "control" & sample_table$batch == 3],
mutations_snv[sample_table$cycle == 9 & sample_table$condition == "enu" & sample_table$batch == 3])
# get overlaps between samples within each cycle
sums_list <- list()
for(x in 1:length(variants_list)){
sums <- c()
for(y in 1:length(variants_list[[x]])){
sums[y] <- sum(countOverlaps(variants_list[[x]][[y]], variants_list[[x]][-y]))
}
sums_list[[x]] <- sums
}
# validate overlaps
variants_list_validate <- lapply(variants_list, overlap_validate)
variants_list_validate
variants_list <- list(mutations_snv[sample_table$cycle == 1],
mutations_snv[sample_table$cycle == 3],
mutations_snv[sample_table$cycle == 6],
mutations_snv[sample_table$cycle == 9 & sample_table$condition == "control" & sample_table$batch == 2],
mutations_snv[sample_table$cycle == 9 & sample_table$condition == "enu" & sample_table$batch == 2],
mutations_snv[sample_table$cycle == 9 & sample_table$condition == "control" & sample_table$batch == 3],
mutations_snv[sample_table$cycle == 9 & sample_table$condition == "enu" & sample_table$batch == 3])
# get overlaps between samples within each cycle
sums_list <- list()
for(x in 1:length(variants_list)){
sums <- c()
for(y in 1:length(variants_list[[x]])){
sums[y] <- sum(countOverlaps(variants_list[[x]][[y]], variants_list[[x]][-y]))
}
sums_list[[x]] <- sums
}
# validate overlaps
variants_list_validate <- lapply(variants_list, overlap_validate)
variants_list_validate
# add to sample table
sample_table$SNV_obs_shared <- unlist(sums_list)
# calculate estimated shared mutations
hg19_size <- 3036303846
sample_table$SNV_est_shared <- sample_table$SNV_obs_shared / sample_table$Cov / sample_table$Sen_SNV * hg19_size
setwd("/Users/ronaldcutler/Dropbox (EinsteinMed)/Vijg-lab/Projects/mutation accumulation/231009 multiple ENU analysis/3-mutation-overlap")
pdf("SNV_shared_observed.pdf",
width = 4,
height = 5)
ggplot(sample_table, aes(x = factor(cycle), y = SNV_obs_shared, fill = condition)) +
geom_boxplot(outlier.shape = NA) +
geom_point(position = position_jitterdodge(jitter.width = 0.2), size = 3) +
guides(fill = guide_legend(override.aes = list(shape = NA))) +
labs(x = "Cycle", y = "Shared observed SNVs") +
scale_fill_Publication() +
theme_Publication()
dev.off()
pdf("SNV_shared_estimated.pdf",
width = 4,
height = 5)
ggplot(sample_table, aes(x = factor(cycle), y = SNV_est_shared, fill = condition)) +
geom_boxplot(outlier.shape = NA) +
geom_point(position = position_jitterdodge(jitter.width = 0.2), size = 3) +
guides(fill = guide_legend(override.aes = list(shape = NA))) +
labs(x = "Cycle", y = "Shared estimated SNVs") +
scale_fill_Publication() +
theme_Publication()
dev.off()
# get list of variants for each cycle and put this into a list
variants_list <- list(mutations_indel[sample_table$cycle == 1],
mutations_indel[sample_table$cycle == 3],
mutations_indel[sample_table$cycle == 6],
mutations_indel[sample_table$cycle == 9 & sample_table$condition == "control" & sample_table$batch == 2],
mutations_indel[sample_table$cycle == 9 & sample_table$condition == "enu" & sample_table$batch == 2],
mutations_indel[sample_table$cycle == 9 & sample_table$condition == "control" & sample_table$batch == 3],
mutations_indel[sample_table$cycle == 9 & sample_table$condition == "enu" & sample_table$batch == 3])
# get overlaps between samples within each cycle
sums_list <- list()
for(x in 1:length(variants_list)){
sums <- c()
for(y in 1:length(variants_list[[x]])){
sums[y] <- sum(countOverlaps(variants_list[[x]][[y]], variants_list[[x]][-y]))
}
sums_list[[x]] <- sums
}
# validate overlaps
variants_list_validate <- lapply(variants_list, overlap_validate)
variants_list_validate
# add to sample table
sample_table$INDEL_obs_shared <- unlist(sums_list)
# calculate estimated shared mutations
hg19_size <- 3036303846
sample_table$INDEL_est_shared <- sample_table$INDEL_obs_shared / sample_table$Cov / sample_table$Sen_INDEL * hg19_size
setwd("/Users/ronaldcutler/Dropbox (EinsteinMed)/Vijg-lab/Projects/mutation accumulation/231009 multiple ENU analysis/3-mutation-overlap")
pdf("INDEL_shared_observed.pdf",
width = 4,
height = 5)
ggplot(sample_table, aes(x = factor(cycle), y = INDEL_obs_shared, fill = condition)) +
geom_boxplot(outlier.shape = NA) +
geom_point(position = position_jitterdodge(jitter.width = 0.2), size = 3) +
guides(fill = guide_legend(override.aes = list(shape = NA))) +
labs(x = "Cycle", y = "Shared observed INDELs") +
scale_fill_Publication() +
theme_Publication()
dev.off()
pdf("INDEL_shared_estimated.pdf",
width = 4,
height = 5)
ggplot(sample_table, aes(x = factor(cycle), y = INDEL_est_shared, fill = condition)) +
geom_boxplot(outlier.shape = NA) +
geom_point(position = position_jitterdodge(jitter.width = 0.2), size = 3) +
guides(fill = guide_legend(override.aes = list(shape = NA))) +
labs(x = "Cycle", y = "Shared estimated INDELs") +
scale_fill_Publication() +
theme_Publication()
dev.off()
setwd("/Users/ronaldcutler/Dropbox (EinsteinMed)/Vijg-lab/Projects/mutation accumulation/231009 multiple ENU analysis/3-mutation-overlap")
# create a granges object which contains all the shared mutations from batches 2 and 3
gr_list <- mutations[sample_table$batch == 2 | sample_table$batch == 3]
# combine all mutations into a single list
gr_list <- unlist(gr_list)
# find duplicates and then only keep a single coppy
gr_list_duplicates <- unique(gr_list[duplicated(gr_list)])
# remove from samples
mutations_filtered <- list()
for (i in seq_along(mutations)) {
indices_to_keep <- setdiff(seq_len(length(mutations[[i]])), match(gr_list_duplicates, mutations[[i]]))
filtered_gr <- mutations[[i]][indices_to_keep]
mutations_filtered[[i]] <- filtered_gr
}
names(mutations_filtered) <- names(mutations)
mutations_filtered <- GRangesList(mutations_filtered)
# plot difference
vec <- unlist(lapply(mutations, length)) - unlist(lapply(mutations_filtered, length))
df <- tibble(Category = names(vec), Value = as.numeric(vec))
pdf("shared_mutations_removed.pdf",
width = 5,
height = 5)
ggplot(df, aes(x = Category, y = Value)) +
geom_bar(stat = "identity") +
coord_flip() +
labs(x = "Sample", y = "Removed shared mutations") +
theme_Publication()
dev.off()
df
lapply(mutations, length)
df <- tibble(Category = names(vec), Value = as.numeric(vec), Total = unlist(lapply(mutations, length)))
pdf("shared_mutations_removed_percentage.pdf",
width = 5,
height = 5)
ggplot(df, aes(x = Category, y = Value/Total)) +
geom_bar(stat = "identity") +
coord_flip() +
labs(x = "Sample", y = "% Removed shared mutations of total") +
theme_Publication()
dev.off()
pdf("shared_mutations_removed_percentage.pdf",
width = 5,
height = 5)
ggplot(df, aes(x = Category, y = Value/Total)) +
geom_bar(stat = "identity") +
coord_flip() +
labs(x = "Sample", y = "% Removed shared mutations of total") +
theme_Publication() +
scale_y_continuous(labels = scales::percent)
dev.off()
pdf("shared_mutations_removed_percentage.pdf",
width = 5,
height = 5)
ggplot(df, aes(x = Category, y = Value/Total)) +
geom_bar(stat = "identity") +
coord_flip() +
labs(x = "Sample", y = "% Removed shared mutations") +
theme_Publication() +
scale_y_continuous(labels = scales::percent)
dev.off()
setwd("/Users/ronaldcutler/Dropbox (EinsteinMed)/Vijg-lab/Projects/mutation accumulation/231009 multiple ENU analysis/3-mutation-overlap")
# create a granges object which contains all the shared mutations from batches 2 and 3
gr_list <- mutations_snv[sample_table$batch == 2 | sample_table$batch == 3]
# combine all mutations into a single list
gr_list <- unlist(gr_list)
# find duplicates and then only keep a single coppy
gr_list_duplicates <- unique(gr_list[duplicated(gr_list)])
# remove from samples
mutations_filtered_snv <- list()
for (i in seq_along(mutations_snv)) {
indices_to_keep <- setdiff(seq_len(length(mutations_snv[[i]])), match(gr_list_duplicates, mutations_snv[[i]]))
filtered_gr <- mutations_snv[[i]][indices_to_keep]
mutations_filtered_snv[[i]] <- filtered_gr
}
names(mutations_filtered_snv) <- names(mutations_snv)
mutations_filtered_snv <- GRangesList(mutations_filtered_snv)
# plot difference
vec <- unlist(lapply(mutations_snv, length)) - unlist(lapply(mutations_filtered_snv, length))
df <- tibble(Category = names(vec), Value = as.numeric(vec))
pdf("SNV_shared_mutations_removed.pdf",
width = 5,
height = 5)
ggplot(df, aes(x = Category, y = Value)) +
geom_bar(stat = "identity") +
coord_flip() +
labs(x = "Sample", y = "Removed shared SNVs") +
theme_Publication()
dev.off()
pdf("SNV_shared_mutations_removed_percentage.pdf",
width = 5,
height = 5)
ggplot(df, aes(x = Category, y = Value/Total)) +
geom_bar(stat = "identity") +
coord_flip() +
labs(x = "Sample", y = "% Removed shared SNVs") +
theme_Publication() +
scale_y_continuous(labels = scales::percent)
df <- tibble(Category = names(vec), Value = as.numeric(vec), Total = unlist(lapply(mutations_snv, length)))
pdf("SNV_shared_mutations_removed.pdf",
width = 5,
height = 5)
ggplot(df, aes(x = Category, y = Value)) +
geom_bar(stat = "identity") +
coord_flip() +
labs(x = "Sample", y = "Removed shared SNVs") +
theme_Publication()
dev.off()
pdf("SNV_shared_mutations_removed_percentage.pdf",
width = 5,
height = 5)
ggplot(df, aes(x = Category, y = Value/Total)) +
geom_bar(stat = "identity") +
coord_flip() +
labs(x = "Sample", y = "% Removed shared SNVs") +
theme_Publication() +
scale_y_continuous(labels = scales::percent)
dev.off()
setwd("/Users/ronaldcutler/Dropbox (EinsteinMed)/Vijg-lab/Projects/mutation accumulation/231009 multiple ENU analysis/3-mutation-overlap")
# create a granges object which contains all the shared mutations from batches 2 and 3
gr_list <- mutations_indel[sample_table$batch == 2 | sample_table$batch == 3]
# combine all mutations into a single list
gr_list <- unlist(gr_list)
# find duplicates and then only keep a single coppy
gr_list_duplicates <- unique(gr_list[duplicated(gr_list)])
# remove from samples
mutations_filtered_indel <- list()
for (i in seq_along(mutations_indel)) {
indices_to_keep <- setdiff(seq_len(length(mutations_indel[[i]])), match(gr_list_duplicates, mutations_indel[[i]]))
filtered_gr <- mutations_indel[[i]][indices_to_keep]
mutations_filtered_indel[[i]] <- filtered_gr
}
names(mutations_filtered_indel) <- names(mutations_indel)
mutations_filtered_indel <- GRangesList(mutations_filtered_indel)
# plot difference
vec <- unlist(lapply(mutations_indel, length)) - unlist(lapply(mutations_filtered_indel, length))
df <- tibble(Category = names(vec), Value = as.numeric(vec), Total = unlist(lapply(mutations_indel, length)))
pdf("INDEL_shared_mutations_removed.pdf",
width = 5,
height = 5)
ggplot(df, aes(x = Category, y = Value)) +
geom_bar(stat = "identity") +
coord_flip() +
labs(x = "Sample", y = "Removed shared INDELs") +
theme_Publication()
dev.off()
pdf("INDEL_shared_mutations_removed_percentage.pdf",
width = 5,
height = 5)
ggplot(df, aes(x = Category, y = Value/Total)) +
geom_bar(stat = "identity") +
coord_flip() +
labs(x = "Sample", y = "% Removed shared INDELs") +
theme_Publication() +
scale_y_continuous(labels = scales::percent)
dev.off()
# SNVs
snv_new <- unlist(lapply(mutations_filtered_snv, length))
all(sample_table$sample == names(snv_new))
sample_table$SNV_obs <- snv_new
# INDELs
indel_new <- unlist(lapply(mutations_filtered_indel, length))
all(sample_table$sample == names(indel_new))
sample_table$INDEL_obs <- indel_new
# get list of variants for each cycle and put this into a list
variants_list <- list(mutations_filtered_snv[sample_table$cycle == 1],
mutations_filtered_snv[sample_table$cycle == 3],
mutations_filtered_snv[sample_table$cycle == 6],
mutations_filtered_snv[sample_table$cycle == 9 & sample_table$condition == "control" & sample_table$batch == 2],
mutations_filtered_snv[sample_table$cycle == 9 & sample_table$condition == "enu" & sample_table$batch == 2],
mutations_filtered_snv[sample_table$cycle == 9 & sample_table$condition == "control" & sample_table$batch == 3],
mutations_filtered_snv[sample_table$cycle == 9 & sample_table$condition == "enu" & sample_table$batch == 3])
# get overlaps between samples within each cycle
sums_list <- list()
for(x in 1:length(variants_list)){
sums <- c()
for(y in 1:length(variants_list[[x]])){
sums[y] <- sum(countOverlaps(variants_list[[x]][[y]], variants_list[[x]][-y]))
}
sums_list[[x]] <- sums
}
# validate overlaps
variants_list_validate <- lapply(variants_list, overlap_validate)
variants_list_validate
# add to sample table
sample_table$SNV_obs_shared <- unlist(sums_list)
# calculate estimated shared mutations
hg19_size <- 3036303846
sample_table$SNV_est_shared <- sample_table$SNV_obs_shared / sample_table$Cov / sample_table$Sen_SNV * hg19_size
setwd("/Users/ronaldcutler/Dropbox (EinsteinMed)/Vijg-lab/Projects/mutation accumulation/231009 multiple ENU analysis/3-mutation-overlap")
pdf("SNV_shared_observed_filtered.pdf",
width = 4,
height = 5)
ggplot(sample_table, aes(x = factor(cycle), y = SNV_obs_shared, fill = condition)) +
geom_boxplot(outlier.shape = NA) +
geom_point(position = position_jitterdodge(jitter.width = 0.2), size = 3) +
guides(fill = guide_legend(override.aes = list(shape = NA))) +
labs(x = "Cycle", y = "Shared observed SNVs") +
scale_fill_Publication() +
theme_Publication()
dev.off()
pdf("SNV_shared_estimated_filtered.pdf",
width = 4,
height = 5)
ggplot(sample_table, aes(x = factor(cycle), y = SNV_est_shared, fill = condition)) +
geom_boxplot(outlier.shape = NA) +
geom_point(position = position_jitterdodge(jitter.width = 0.2), size = 3) +
guides(fill = guide_legend(override.aes = list(shape = NA))) +
labs(x = "Cycle", y = "Shared estimated SNVs") +
scale_fill_Publication() +
theme_Publication()
dev.off()
# get list of variants for each cycle and put this into a list
variants_list <- list(mutations_filtered_indel[sample_table$cycle == 1],
mutations_filtered_indel[sample_table$cycle == 3],
mutations_filtered_indel[sample_table$cycle == 6],
mutations_filtered_indel[sample_table$cycle == 9 & sample_table$condition == "control" & sample_table$batch == 2],
mutations_filtered_indel[sample_table$cycle == 9 & sample_table$condition == "enu" & sample_table$batch == 2],
mutations_filtered_indel[sample_table$cycle == 9 & sample_table$condition == "control" & sample_table$batch == 3],
mutations_filtered_indel[sample_table$cycle == 9 & sample_table$condition == "enu" & sample_table$batch == 3])
# get overlaps between samples within each cycle
sums_list <- list()
for(x in 1:length(variants_list)){
sums <- c()
for(y in 1:length(variants_list[[x]])){
sums[y] <- sum(countOverlaps(variants_list[[x]][[y]], variants_list[[x]][-y]))
}
sums_list[[x]] <- sums
}
# validate overlaps
variants_list_validate <- lapply(variants_list, overlap_validate)
variants_list_validate
# add to sample table
sample_table$INDEL_obs_shared <- unlist(sums_list)
# calculate estimated shared mutations
hg19_size <- 3036303846
sample_table$INDEL_est_shared <- sample_table$INDEL_obs_shared / sample_table$Cov / sample_table$Sen_INDEL * hg19_size
setwd("/Users/ronaldcutler/Dropbox (EinsteinMed)/Vijg-lab/Projects/mutation accumulation/231009 multiple ENU analysis/3-mutation-overlap")
pdf("INDEL_shared_observed_filtered.pdf",
width = 4,
height = 5)
ggplot(sample_table, aes(x = factor(cycle), y = INDEL_obs_shared, fill = condition)) +
geom_boxplot(outlier.shape = NA) +
geom_point(position = position_jitterdodge(jitter.width = 0.2), size = 3) +
guides(fill = guide_legend(override.aes = list(shape = NA))) +
labs(x = "Cycle", y = "Shared observed INDELs") +
scale_fill_Publication() +
theme_Publication()
dev.off()
pdf("INDEL_shared_estimated_filtered.pdf",
width = 4,
height = 5)
ggplot(sample_table, aes(x = factor(cycle), y = INDEL_est_shared, fill = condition)) +
geom_boxplot(outlier.shape = NA) +
geom_point(position = position_jitterdodge(jitter.width = 0.2), size = 3) +
guides(fill = guide_legend(override.aes = list(shape = NA))) +
labs(x = "Cycle", y = "Shared estimated INDELs") +
scale_fill_Publication() +
theme_Publication()
dev.off()
setwd("/Users/ronaldcutler/Dropbox\ (EinsteinMed)/Vijg-lab/Projects/mutation\ accumulation/231009\ multiple\ ENU\ analysis/1-data")
write.table(sample_table, "sample_table_filtered.txt",
row.names = FALSE,
quote = FALSE,
sep = "\t")
