library(NbClust)
library(factoextra)
colour = palette.colors(palette = "Okabe-Ito")
# Chunk 3
all_un <- function(str) {
matches <- gregexpr("\\[.*?\\]", str)
brackets <- regmatches(str, matches)[[1]]
all(grepl("\\[un\\]", brackets))
}
unmod <- function(peptide) {
# Split the peptide by the semicolon
marks <- strsplit(peptide, ";")[[1]]
# Check if all the modifications are [un]
all_un <- all(grepl("\\[un\\]", marks))
return(all_un)
}
single_mark <- function(peptide) {
# Split the peptide by the semicolon
marks <- strsplit(peptide, ";")[[1]]
# Count the number of modifications (excluding [un])
modification_count <- sum(!grepl("\\[[un]\\]", marks))
# Check if it's exactly one
return(modification_count == 1)
}
combination_marks <- function(peptide) {
# Split the peptide by the semicolon
marks <- strsplit(peptide, ";")[[1]]
# Extract all the marks within brackets that are not [un]
unique_marks <- unique(gregexpr("\\[[^un]\\w+\\]", peptide, perl = TRUE)[[1]])
# Check if there are at least 2 unique marks other than [un]
return(length(unique_marks) >= 2)
}
hybrid_marks <- function(peptide) {
ac <- grepl("\\[ac\\]", peptide)
me <- grepl("\\[me1\\]", peptide) |
grepl("\\[me2\\]", peptide) |
grepl("\\[me3\\]", peptide)
return(ac && me)
}
BiocManager::install("SummarizedExperiment")
if (!require("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install("SummarizedExperiment")
BiocManager::install("SummarizedExperiment")
library(SummarizedExperiment)
knitr::opts_chunk$set(echo = TRUE)
install.packages("knitr")
knitr::opts_chunk$set(echo = TRUE)
library(readxl)
install.packages("readxl")
library(readxl)
setwd("/Users/ronaldcutler/Dropbox\ (EinsteinMed)/Sidoli-lab/Collaboration/April\ Mueller/1-data")
unlink("Dropbox (EinsteinMed)/Sidoli-lab/Collaboration/April Mueller/2-histone-analysis/differential-abundance_cache", recursive = TRUE)
setwd("/Users/ronaldcutler/Dropbox\ (EinsteinMed)/Sidoli-lab/Collaboration/April\ Mueller/1-data")
knitr::opts_chunk$set(echo = TRUE)
library(dplyr)
setwd("/Users/ronaldcutler/Dropbox\ \(EinsteinMed\)/Sidoli-lab/Projects/Single-cell-histone/Analysis/1-data/single-cell/spectronaut")
setwd("/Users/ronaldcutler/Dropbox\ (EinsteinMed)/Sidoli-lab/Projects/Single-cell-histone/Analysis/1-data/single-cell/spectronaut")
df <- read.table("20240129_162957_Histone_VarPropK_Report.tsv",
header = TRUE)
df <- read.table("20240129_162957_Histone_VarPropK_Report.tsv",
header = FALSE)
setwd("/Users/ronaldcutler/Dropbox\ (EinsteinMed)/Sidoli-lab/Projects/Single-cell-histone/Analysis/1-data/single-cell/spectronaut")
df <- read.table("20240129_162957_Histone_VarPropK_Report.tsv",
header = FALSE)
?read.table
df <- read.table("20240129_162957_Histone_VarPropK_Report.tsv",
header = FALSE,
fill = NA)
setwd("/Users/ronaldcutler/Dropbox\ (EinsteinMed)/Sidoli-lab/Projects/Single-cell-histone/Analysis/1-data/single-cell/spectronaut")
df <- read.table("20240129_162957_Histone_VarPropK_Report.tsv",
header = FALSE,
fill = NA)
setwd("/Users/ronaldcutler/Dropbox\ (EinsteinMed)/Sidoli-lab/Projects/Single-cell-histone/Analysis/1-data/single-cell/spectronaut")
df <- read.table("20240129_162957_Histone_VarPropK_Report.tsv",
header = TRUE,
fill = NA)
setwd("/Users/ronaldcutler/Dropbox\ (EinsteinMed)/Sidoli-lab/Projects/Single-cell-histone/Analysis/1-data/single-cell/spectronaut")
df <- read.table("20240129_162957_Histone_VarPropK_Report.tsv",
header = FALSE,
fill = NA)
head(df)
setwd("/Users/ronaldcutler/Dropbox\ (EinsteinMed)/Sidoli-lab/Projects/Single-cell-histone/Analysis/1-data/single-cell/spectronaut")
df <- read.table("20240129_162957_Histone_VarPropK_Report.tsv",
sep = "\t",
header = TRUE,
fill = NA)
head(df)
colnames(df)
df %>%
group_by(R.FileName)
df %>%
group_by(R.FileName) %>%
count(PG.Genes)
df %>%
group_by(R.FileName) %>%
count(PG.Genes)
df %>%
group_by(R.FileName)
df %>%
group_by(R.FileName)
df %>%
group_by(R.FileName) %>%
count(PG.Genes)
df %>%
group_by(R.FileName) %>%
count(unique(PG.Genes))
df %>%
group_by(R.FileName) %>%
count(PG.Genes) %>%
nrow()
df %>%
filter(!grepl(";", PG.Genes))
df %>%
filter(!grepl(";", PG.Genes)) %>%
group_by(R.FileName) %>%
summarise(genes = count(PG.Genes))
df %>%
filter(!grepl(";", PG.Genes)) %>%
group_by(R.FileName) %>%
summarise(genes = sum(PG.Genes))
df %>%
filter(!grepl(";", PG.Genes)) %>%
group_by(R.FileName) %>%
count(PG.Genes)
df %>%
filter(!grepl(";", PG.Genes)) %>%
distinct(PG.Genes, .keep_all = TRUE)
df %>%
filter(!grepl(";", PG.Genes)) %>%
group_by(R.FileName) %>%
distinct(PG.Genes, .keep_all = TRUE)
df %>%
filter(!grepl(";", PG.Genes)) %>%
group_by(R.FileName) %>%
distinct(PG.Genes, .keep_all = TRUE) %>%
count(PG.Genes)
df %>%
filter(!grepl(";", PG.Genes)) %>%
group_by(R.FileName) %>%
distinct(PG.Genes, .keep_all = TRUE)
df %>%
filter(!grepl(";", PG.Genes)) %>%
group_by(R.FileName)
df %>%
filter(!grepl(";", PG.Genes)) %>%
group_by(R.FileName) %>%
count(PG.Genes)
df %>%
filter(!grepl(";", PG.Genes)) %>%
group_by(R.FileName) %>%
summarise(Genes = n_distinct(PG.Genes))
# Chunk 1: setup
knitr::opts_chunk$set(echo = TRUE)
# Chunk 2
library(VariantAnnotation)
library(GenomicRanges)
library(GenomicFeatures)
library(rtracklayer)
library(MutationalPatterns)
library(ggplot2)
library(zFPKM)
library(biomaRt)
library(BSgenome.Hsapiens.UCSC.hg19)
library(TxDb.Hsapiens.UCSC.hg19.knownGene)
TxDb.Hsapiens.UCSC.hg19.knownGene <- keepStandardChromosomes(TxDb.Hsapiens.UCSC.hg19.knownGene)
TxDb.Hsapiens.UCSC.hg19.knownGene <- dropSeqlevels(TxDb.Hsapiens.UCSC.hg19.knownGene, c("chrY", "chrM"), pruning.mode="coarse")
hg19_size <- sum(seqlengths(TxDb.Hsapiens.UCSC.hg19.knownGene))
# Chunk 3
theme_Publication <- function(base_size=16, base_family="helvetica") {
library(grid)
library(ggthemes)
(theme_foundation(base_size=base_size, base_family = "")
+ theme(plot.title = element_text(face = "bold",
size = rel(1.2), hjust = 0.5),
text = element_text(),
panel.background = element_rect(colour = NA),
plot.background = element_rect(colour = NA),
panel.border = element_rect(colour = NA),
axis.title = element_text(face = "bold",size = rel(1)),
axis.title.y = element_text(angle=90,vjust =2),
axis.title.x = element_text(vjust = -0.2),
axis.text = element_text(),
axis.line = element_line(colour="black"),
axis.ticks = element_line(),
panel.grid.major = element_line(colour="#f0f0f0"),
panel.grid.minor = element_blank(),
legend.key = element_rect(colour = NA),
legend.position = "bottom",
legend.direction = "horizontal",
#legend.key.size= unit(0.2, "cm"),
legend.margin = unit(0, "cm"),
legend.title = element_text(face="italic"),
plot.margin=unit(c(10,5,5,5),"mm"),
strip.background=element_rect(colour="#f0f0f0",fill="#f0f0f0"),
strip.text = element_text(face="bold")
))
}
scale_fill_Publication <- function(...){
library(scales)
discrete_scale("fill","Publication",manual_pal(values = c("#386cb0","#fdb462","#7fc97f","#ef3b2c","#662506","#a6cee3","#fb9a99","#984ea3","#ffff33")), ...)
}
scale_colour_Publication <- function(...){
library(scales)
discrete_scale("colour","Publication",manual_pal(values = c("#386cb0","#fdb462","#7fc97f","#ef3b2c","#662506","#a6cee3","#fb9a99","#984ea3","#ffff33")), ...)
}
group_GRanges <- function(variants_list, sample_table, grouping_column = "") {
# 1. Get unique groupings
unique_groupings <- unique(sample_table[[grouping_column]])
# 2. Iterate over each grouping
combined_variants_list <- lapply(unique_groupings, function(group) {
# Indices of variants belonging to this group
indices <- which(sample_table[[grouping_column]] == group)
# Combine variants
combined_variants <- unlist(variants_list[indices])
return(combined_variants)
})
names(combined_variants_list) <- unique_groupings
return(GRangesList(combined_variants_list))
}
# Chunk 4
vcf_files <- list.files(path = "/Users/ronaldcutler/Dropbox\ (EinsteinMed)/Vijg-lab/Projects/mutation\ accumulation/231009\ multiple\ ENU\ analysis/1-data/final/filtered",
pattern = "\\.vcf$", full.names = TRUE)
sample_table <- read.table("/Users/ronaldcutler/Dropbox\ (EinsteinMed)/Vijg-lab/Projects/mutation\ accumulation/231009\ multiple\ ENU\ analysis/1-data/sample_table_filtered.txt", header = TRUE, sep = "\t")
sample_table$condition_cycle <- paste(sample_table$condition, sample_table$cycle, sep = "_")
# reorder vcf_files to match sample_table
vcf_files <- vcf_files[match(sample_table$sample,tools::file_path_sans_ext(basename(vcf_files)))]
# Chunk 5
mutations <- read_vcfs_as_granges(vcf_files, sample_table$sample, BSgenome.Hsapiens.UCSC.hg19, type = "all")
mutations_snv <- read_vcfs_as_granges(vcf_files, sample_table$sample, BSgenome.Hsapiens.UCSC.hg19, type = "snv")
mutations_snv_condition <- group_GRanges(mutations_snv, sample_table, "condition")
mutations_snv_condition_cycle <- group_GRanges(mutations_snv, sample_table, "condition_cycle")
mutations_indel <- read_vcfs_as_granges(vcf_files, sample_table$sample, BSgenome.Hsapiens.UCSC.hg19, type = "indel")
mutations_indel_condition <- group_GRanges(mutations_indel, sample_table, "condition")
mutations_indel_condition_cycle <- group_GRanges(mutations_indel, sample_table, "condition_cycle")
# Chunk 6
dir.create("/Users/ronaldcutler/Dropbox\ (EinsteinMed)/Vijg-lab/Projects/mutation\ accumulation/231009\ multiple\ ENU\ analysis/4-mutational-signatures/with-control-cells/spectrum_profile_context")
setwd("/Users/ronaldcutler/Dropbox\ (EinsteinMed)/Vijg-lab/Projects/mutation\ accumulation/231009\ multiple\ ENU\ analysis/4-mutational-signatures/with-control-cells/spectrum_profile_context")
type_occurrences <- mut_type_occurrences(mutations_snv, BSgenome.Hsapiens.UCSC.hg19)
pdf("SNV_spectrum_cell.pdf",
width = 10,
height = 10)
plot_spectrum(type_occurrences,
CT = TRUE,
legend = TRUE,
error_bars = 'stdev',
by = sample_table$sample,
condensed = T) +
theme_Publication(base_size = 12) +
theme(axis.text.x = element_blank(),
axis.ticks.x = element_blank(),
legend.position = "bottom",
legend.direction = "horizontal",
strip.text = element_text(size = 10))
dev.off()
pdf("SNV_spectrum_condition.pdf",
width = 5,
height = 4)
plot_spectrum(type_occurrences,
CT = TRUE,
indv_points = TRUE,
legend = TRUE,
error_bars = 'stdev',
by = sample_table$condition,
condensed = T) +
theme_Publication(base_size = 16) +
theme(axis.text.x = element_blank(),
axis.ticks.x = element_blank(),
legend.position = "bottom",
legend.direction = "horizontal",
strip.text = element_text(size = 12),
legend.text = element_text(size = 10),
legend.title = element_text(size = 12))
dev.off()
pdf("SNV_spectrum_condition_cycle.pdf",
width = 6,
height = 5)
plot_spectrum(type_occurrences,
CT = TRUE,
indv_points = TRUE,
legend = TRUE,
error_bars = 'stdev',
by = sample_table$condition_cycle,
condensed = T)  +
theme_Publication(base_size = 12) +
theme(axis.text.x = element_blank(),
axis.ticks.x = element_blank(),
legend.position = "bottom",
legend.direction = "horizontal",
strip.text = element_text(size = 10))
dev.off()
# Chunk 7
setwd("/Users/ronaldcutler/Dropbox\ (EinsteinMed)/Vijg-lab/Projects/mutation\ accumulation/231009\ multiple\ ENU\ analysis/4-mutational-signatures/with-control-cells/spectrum_profile_context")
# by cell
mut_mat_cell <- mut_matrix(mutations_snv, BSgenome.Hsapiens.UCSC.hg19)
pdf("SNV_96_profile_sample.pdf",
width = 10,
height = 20)
plot_96_profile(mut_mat_cell,
ymax = 0.1,
condensed = TRUE)
dev.off()
# by condition
mut_mat_condition <- mut_matrix(mutations_snv_condition, BSgenome.Hsapiens.UCSC.hg19)
colnames(mut_mat_condition) <- c("Control", "ENU")
pdf("SNV_96_profile_condition.pdf",
width = 10,
height = 4)
plot_96_profile(mut_mat_condition,
ymax = 0.1,
condensed = TRUE)
dev.off()
write.csv(mut_mat_condition, "mut_mat_condition.csv", quote = FALSE)
# by condition and cycle
mut_mat_condition_cycle <- mut_matrix(mutations_snv_condition_cycle, BSgenome.Hsapiens.UCSC.hg19)
mut_mat_condition_cycle <- mut_mat_condition_cycle[,c(1, 4, 2, 3, 5)]
colnames(mut_mat_condition_cycle) <- c("Control Cycle 1", "Control Cycle 9", "ENU Cycle 3", "ENU Cycle 6", "ENU Cycle 9")
pdf("SNV_96_profile_condition_cycle.pdf",
width = 9,
height = 3)
plot_96_profile(mut_mat_condition_cycle,
ymax = 0.1,
condensed = TRUE)
dev.off()
# control cycle 1 only
pdf("SNV_96_profile_control_cycle_1.pdf",
width = 8,
height = 4)
plot_96_profile(mut_mat_condition_cycle[, 1, drop = FALSE],
ymax = 0.05,
condensed = TRUE)
dev.off()
# Chunk 8
mut_mat_condition_cycle <- mut_mat_condition_cycle[, 1, drop = FALSE]
# Chunk 9
dir.create("/Users/ronaldcutler/Dropbox\ (EinsteinMed)/Vijg-lab/Projects/mutation\ accumulation/231009\ multiple\ ENU\ analysis/4-mutational-signatures/with-control-cells/signature")
setwd("/Users/ronaldcutler/Dropbox\ (EinsteinMed)/Vijg-lab/Projects/mutation\ accumulation/231009\ multiple\ ENU\ analysis/4-mutational-signatures/with-control-cells/signature")
# extract signatures only for control cycle 1
nmf_res_snv <- extract_signatures(mut_mat_condition_cycle,
rank = 1,
nrun = 1000,
nmf_type = "regular",
single_core = FALSE)
# name signatures
colnames(nmf_res_snv$signatures) <- c("SBSA")
rownames(nmf_res_snv$contribution) <- c("SBSA")
# plot profile
pdf("SNV_de_novo_signature_profile_control_cycle_1.pdf",
width = 6.5,
height = 3)
plot_96_profile(nmf_res_snv$signatures,
ymax= 0.05,
condensed = TRUE) +
scale_y_continuous(breaks = seq(0, 0.05, by = 0.01))
dev.off()
# compare original vs reconstructed
pdf("SNV_de_novo_signature_profile_reconstruction.pdf",
width = 5,
height = 5)
plot_original_vs_reconstructed(mut_mat_condition_cycle, nmf_res_snv$reconstructed,
y_intercept = 0.95)
dev.off()
# plot contribution
pdf("SNV_de_novo_profile_contribution_relative.pdf",
width = 4,
height = 5)
plot_contribution(nmf_res_snv$contribution,
nmf_res_snv$signature,
mode = "relative",
coord_flip = TRUE) +
theme_Publication(base_size = 14)
dev.off()
pdf("SNV_de_novo_profile_contribution_absolute.pdf",
width = 4,
height = 5)
plot_contribution(nmf_res_snv$contribution,
nmf_res_snv$signature,
mode = "absolute",
coord_flip = TRUE) +
theme_Publication(base_size = 14)
dev.off()
# Chunk 10
# compare to known signatures - focus on artifacts
cosmic_signatures = get_known_signatures(muttype = "snv",
source = "COSMIC",
tissue_type = NULL,
incl_poss_artifacts = TRUE)
# get cosine similarity of all signatures to the denovo
cos_sim_all <- apply(cosmic_signatures, 2, function(x) cos_sim(x, nmf_res_snv$signatures[,1]))
cos_sim_all <- cos_sim_all[order(cos_sim_all, decreasing = TRUE)]
# get top 10 COSMIC signatures that correalate the best to each de novo signature
fit_res_snv <- fit_to_signatures_strict(mut_mat_condition_cycle,
cosmic_signatures[, colnames(cosmic_signatures) %in% names(cos_sim_all[1:10])],
max_delta = 0.002,
method = "best_subset")
# compare original vs reconstructed
pdf("SNV_cosmic_refit_signature_profile_reconstruction.pdf",
width = 5,
height = 5)
plot_original_vs_reconstructed(mut_mat_condition_cycle,
fit_res_snv$fit_res$reconstructed,
y_intercept = 0.95)
dev.off()
# plot contribution
pdf("SNV_cosmic_refit_signature_profile_contribution_relative.pdf",
width = 5,
height = 5)
plot_contribution(fit_res_snv$fit_res$contribution,
mode = "relative",
coord_flip = FALSE) +
theme_Publication(base_size = 14)
dev.off()
pdf("SNV_cosmic_refit_signature_profile_contribution_absolute.pdf",
width = 8,
height = 8)
plot_contribution(fit_res_snv$fit_res$contribution,
mode = "absolute",
coord_flip = TRUE) +
theme_Publication(base_size = 14)
dev.off()
# Chunk 11
# compare to known signatures - focus on artifacts
signal_signatures = get_known_signatures(muttype = "snv",
source = "SIGNAL",
tissue_type = NULL,
incl_poss_artifacts = TRUE)
# get cosine similarity of all signatures to the denovo
cos_sim_all <- apply(signal_signatures, 2, function(x) cos_sim(x, nmf_res_snv$signatures[,1]))
cos_sim_all <- cos_sim_all[order(cos_sim_all, decreasing = TRUE)]
# get top 10 COSMIC signatures that correalate the best to each de novo signature
fit_res_snv <- fit_to_signatures_strict(mut_mat_condition_cycle,
signal_signatures[, colnames(signal_signatures) %in% names(cos_sim_all[1:10])],
max_delta = 0.002,
method = "best_subset")
# compare original vs reconstructed
pdf("SNV_signal_refit_signature_profile_reconstruction.pdf",
width = 5,
height = 5)
plot_original_vs_reconstructed(mut_mat_condition_cycle, fit_res_snv$fit_res$reconstructed,
y_intercept = 0.95)
dev.off()
# compare original vs reconstructed
pdf("SNV_signal_refit_signature_profile_reconstruction.pdf",
width = 5,
height = 5)
plot_original_vs_reconstructed(mut_mat_condition_cycle, fit_res_snv$fit_res$reconstructed,
y_intercept = 0.95)
dev.off()
# plot contribution
pdf("SNV_signal_refit_signature_profile_contribution_relative.pdf",
width = 5,
height = 5)
plot_contribution(fit_res_snv$fit_res$contribution,
mode = "relative",
coord_flip = FALSE) +
theme_Publication(base_size = 14)
dev.off()
pdf("SNV_signal_refit_signature_profile_contribution_absolute.pdf",
width = 8,
height = 8)
plot_contribution(fit_res_snv$fit_res$contribution,
mode = "absolute",
coord_flip = TRUE) +
theme_Publication(base_size = 14)
dev.off()
# Chunk 12
# compare to known signatures - focus on artifacts
petljak_signatures <- as.matrix(read.csv("/Users/ronaldcutler/Dropbox (EinsteinMed)/Vijg-lab/Projects/mutation accumulation/231009 multiple ENU analysis/4-mutational-signatures/with-control-cells/Petljak 2019 sc artefact signatures.csv", header = TRUE, row.names = 1))
# get cosine similarity of all signatures to the denovo
cos_sim_all <- apply(petljak_signatures, 2, function(x) cos_sim(x, nmf_res_snv$signatures[,1]))
cos_sim_all <- cos_sim_all[order(cos_sim_all, decreasing = TRUE)]
pdf("SNV_signature_refit_petljak_SBSA_vs_scF.pdf",
width = 7,
height = 4)
plot_compare_profiles(nmf_res_snv$signatures[,"SBSA"],
petljak_signatures[, "signatures.SBSscF"],
profile_names = c("SBSA", "SBS scF"),
#profile_ymax = 0.06,
condensed = TRUE)
dev.off()
fit_res_snv <- fit_to_signatures_strict(mut_mat_condition_cycle, petljak_signatures)
# compare original vs reconstructed
pdf("SNV_petljak_refit_signature_profile_reconstruction.pdf",
width = 5,
height = 5)
plot_original_vs_reconstructed(mut_mat_condition_cycle, fit_res_snv$fit_res$reconstructed,
y_intercept = 0.95)
dev.off()
# compare original vs reconstructed
pdf("SNV_petljak_refit_signature_profile_reconstruction.pdf",
width = 5,
height = 5)
plot_original_vs_reconstructed(mut_mat_condition_cycle, fit_res_snv$fit_res$reconstructed,
y_intercept = 0.95)
dev.off()
# plot contribution
pdf("SNV_petljak_refit_signature_profile_contribution_relative.pdf",
width = 5,
height = 5)
plot_contribution(fit_res_snv$fit_res$contribution,
mode = "relative",
coord_flip = FALSE) +
theme_Publication(base_size = 14)
dev.off()
pdf("SNV_petljak_refit_signature_profile_contribution_absolute.pdf",
width = 8,
height = 8)
plot_contribution(fit_res_snv$fit_res$contribution,
mode = "absolute",
coord_flip = TRUE) +
theme_Publication(base_size = 14)
dev.off()
